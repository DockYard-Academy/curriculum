# Blog: Migration

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Blog: Migration

Your existing [Blog](./group_project_blog.livemd) application should already have blog posts with a `title`, `subtitle`, and `content`.

<!-- livebook:{"break_markdown":true} -->

### Blog Post Migration

You're going to create a migration or many migrations to modify the blog posts table with the following changes:

* Remove the `subtitle` field
* Add a `published_on` `:date` field.
* Add a `visible` `:boolean` field which defaults to `true`.

Ensure your `Post` schema reflects these changes, and ensure all tests pass. Modify existing tests to include the new fields.

Ensure all features of your application such as creating, reading, updating, and deleting posts continue to work. You will likely need to modify any pages using old fields that are no longer valid.

<!-- livebook:{"break_markdown":true} -->

### Form Fields

Add a date input for the `published_on` field, and a checkbox input for the `visible` field.

Use the IEx shell to view all `Post` records to ensure your form correctly creates a blog post.

```
iex -S mix
```

<!-- livebook:{"break_markdown":true} -->

### Visibility

When displaying a list of blog posts, hide any blog posts whose `visible` field is `false` or whose `published_on` field is after the current UTC date.

<!-- livebook:{"break_markdown":true} -->

### Push to GitHub

From the `blog` folder run the following commands.

First, ensure that all tests pass.

```
mix test
```

Then create a pull request, review it, and merge it into your main branch.

<!-- livebook:{"break_markdown":true} -->

### Bonus: Constraints

Create another migration to add the following constraints:

* Modify the title field to be unique.
* Modify the `title` so it must be between `3` and `100` characters.

Ensure your `Post` schema reflects these constraints and validations.

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"blog_migration_reading\"\n    \"exercises\" -> \"blog_migration_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "blog_migration_reading"
    "exercises" -> "blog_migration_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b blog-migration-exercise
$ git add .
$ git commit -m "finish blog migration exercise"
$ git push origin blog-migration-exercise
```

Create a pull request from your `blog-migration-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                           | Next                                                     |
| ------------------------------------------------------------------ | -------------------------------------------------------: |
| [Schemas and Migrations](../reading/schemas_and_migrations.livemd) | [BookSearch: Books](../reading/book_search_books.livemd) |
