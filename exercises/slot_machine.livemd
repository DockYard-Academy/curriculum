# Slot Machine

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## The House Inc

You have been hired at The House Inc.

The House Inc is a casino right in the middle of Generic City. You aren't sure why a casino needs a programmer but you were desperate and applied anyway.

Somehow, you actually made it past the other applicants and got the job... Or maybe that was because you were the only applicant.

Your first assignment was to write the code for a slot machine. You looked at the specification and you were alarmed at how unfair this slot machine is. The House Inc isn't known for being a good place to work but you decide to talk to your boss about it anyway.

So you went to your boss's office to voice your opinions on the topic and after you give a passionate speech on the value of ethics and morals. Your boss interrupts you in the middle of your ~~tantrum~~ speech and asks what ethics means.

At that very moment you knew that there was no way these guys would listen because the only ethics they believe in are profit maximization.

## Slot Machine Specs

The slot machine is a [GenServer](https://hexdocs.pm/elixir/GenServer.html) that has the state of `balance` within it. Balance is how much money the machine has.

* Slot machine reward sizes are random but must not exceed `balance`.
* When a slot machine gives out a reward. Subtract `balance` by the amount of the reward.
* The machine should only give rewards 30% of the time.

This exercise will need you to use if statements. You will also need to figure out a way to generate random numbers and convert those into chances.

```elixir
defmodule SlotMachine do
  use GenServer

  def start() do
    GenServer.start(__MODULE__, :ok)
  end

  def init(:ok) do
    {:ok, %{balance: 7000}}
  end

  @doc """
  Use this function for debugging. You need to make sure that your slot machine works properly.
  """
  def get_balance(pid) do
  end

  @doc """
  This is the main function for this module.

  Make sure that that players get rewards only 30% of the time.
  Make sure that the machine doesn't give more rewards than its balance.
  Make sure the machine doesn't give negative rewards!

  Use the :rand erlang module to generate random numbers.

  The machine should either print "You lose!" or "You won ... dollars"
  """
  def roll(pid) do
  end

  @doc """This function gets the current balance."""
  def handle_call({:get_balance}, _from, state) do
  end

  @doc """This function subtracts from the current balance"""
  def handle_call({:subtract_balance, amount}, _from, state) do
  end
end
```

## Bonuses

* This machine is boring. Make numbers spin on screen with `IO.write` to make the slot machine feel like a slot machine.
* Create another [GenServer](https://hexdocs.pm/elixir/GenServer.html) that represents a person in the casino and make that person have to pay money in order to use the slot machine. A person can no longer play if he runs out of money.

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-/home/smartix/beta_curriculum/exercises/slot_machine.livemd
$ git add .
$ git commit -m "finish slot machine exercise"
$ git push origin exercise-/home/smartix/beta_curriculum/exercises/slot_machine.livemd
```

Then create a pull request to your `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

## Up Next

| Previous                                                         | Next                                                 |
| ---------------------------------------------------------------- | ---------------------------------------------------: |
| [Traffic Light Server](../exercises/traffic_light_server.livemd) | [Pokemon Server](../exercises/pokemon_server.livemd) |
