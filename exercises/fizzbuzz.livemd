# FizzBuzz

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "#{__DIR__}/../utils"},
  {:tested_cell, git: "https://github.com/BrooklinJazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## FizzBuzz

In the Elixir cell below create a Module `FizzBuzz` with a function `run/1` which takes in a **range**.

Enumerate through the integers and return a new list where

* integers divisible by `3` are replaced with `fizz`
* integers divisible by `5` are replaced with `buzz`
* integers divisible by `3` and `5` are replaced with `fizzbuzz`
* integers not matching the above stay the same.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
FizzBuzz.run(1..15)
[1, 2, "fizz", 4, "buzz", "fizz", 7, 8, "fizz", "buzz", 11, "fizz", 13, 14, "fizzbuzz"]
```

<!-- livebook:{"attrs":{"assertions":"defmodule Solutions.FizzBuzz do\n  def run(range) do\n    Enum.map(range, fn n ->\n      cond do\n        rem(n, 15) == 0 -> \"fizzbuzz\"\n        rem(n, 3) == 0 -> \"fizz\"\n        rem(n, 5) == 0 -> \"buzz\"\n        true -> n\n      end\n    end)\n  end\nend\n\nassert FizzBuzz.run(1..15) == [\n          1,\n          2,\n          \"fizz\",\n          4,\n          \"buzz\",\n          \"fizz\",\n          7,\n          8,\n          \"fizz\",\n          \"buzz\",\n          11,\n          \"fizz\",\n          13,\n          14,\n          \"fizzbuzz\"\n        ]\n\nassert FizzBuzz.run(1..100) == Solutions.FizzBuzz.run(1..100)","code":"defmodule FizzBuzz do\r\n  def run(range) do\r\n  end\r\nend","solution":"defmodule FizzBuzz do\n  def run(range) do\n    Enum.map(range, fn n ->\n      cond do\n        rem(n, 15) == 0 -> \"fizzbuzz\"\n        rem(n, 3) == 0 -> \"fizz\"\n        rem(n, 5) == 0 -> \"buzz\"\n        true -> n\n      end\n    end)\n  end\nend"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    defmodule FizzBuzz do
      def run(range) do
      end
    end

    defmodule Solutions.FizzBuzz do
      def run(range) do
        Enum.map(range, fn n ->
          cond do
            rem(n, 15) == 0 -> "fizzbuzz"
            rem(n, 3) == 0 -> "fizz"
            rem(n, 5) == 0 -> "buzz"
            true -> n
          end
        end)
      end
    end

    assert FizzBuzz.run(1..15) == [
             1,
             2,
             "fizz",
             4,
             "buzz",
             "fizz",
             7,
             8,
             "fizz",
             "buzz",
             11,
             "fizz",
             13,
             14,
             "fizzbuzz"
           ]

    assert FizzBuzz.run(1..100) == Solutions.FizzBuzz.run(1..100)
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
defmodule FizzBuzz do
  def run(range) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish fizzbuzz exercise"
```
