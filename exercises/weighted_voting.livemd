# Weighted Voting

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Weighted Voting

In the previous [Counting Votes](./counting_votes.livemd) exercise, we created a module to count a list of votes. For example, users would vote for their favorite animal to decide if `:birds`, `:dogs`, or `:cats` were more popular.

Now, you're going to create a `WeightedVoting.count/2` that can count the number of votes for a single value such as `:dogs` or `:cats`. provided in a keyword list.

<!-- livebook:{"force_markdown":true} -->

```elixir
WeightedVoting.count([cats: 10, dogs: 20, dogs: 20], :dogs)
40
```

You're also going to create a `WeightedVoting.tally/1` function that will count the votes provided in a keyword list, and return the results as a keyword list.

<!-- livebook:{"force_markdown":true} -->

```elixir
WeightedVoting.tally([cats: 10, dogs: 20, dogs: 20])
[cats: 10, dogs: 40]
```

Ensure the keyword list is sorted in alphabetical order. You can do this with [Enum.sort/1](https://hexdocs.pm/elixir/Enum.html#sort/1).

```elixir
Enum.sort(c: "c", b: "b", a: "a")
```

```elixir
defmodule WeightedVoting do
  @doc """
  Count the total number of votes for some key in a keyword list.
  
  ## Examples
  
    iex> WeightedVoting.count([dogs: 20, dogs: 10], :dogs)
    30
    iex> WeightedVoting.count([cats: 10, dogs: 20, dogs: 30], :dogs)
    50
    iex> WeightedVoting.count([cats: 10, dogs: 20, dogs: 10, cats: 30], :cats)
    40
  """
  def count(votes, vote_to_count) do
  end

  @doc """
  Tally the total number of votes in a keyword list, and return
  the results as a keyword list.
  
  The keyword list should be sorted in alphabetical order.
  
  ## Examples
  
    iex> WeightedVoting.tally([dogs: 20, dogs: 10])
    [dogs: 30]
    iex> WeightedVoting.tally([cats: 10, dogs: 20, dogs: 10])
    [cats: 10, dogs: 30]
    iex> WeightedVoting.tally([cats: 10, dogs: 20, cats: 20, dogs: 10, birds: 20])
    [birds: 20, cats: 30, dogs: 30]
  """
  def tally(votes) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish tally votes exercise"
```

## Up Next

| Previous                                               | Next                                               |
| ------------------------------------------------------ | -------------------------------------------------: |
| [Bottles Of Soda](../exercises/bottles_of_soda.livemd) | [Number Finder](../exercises/number_finder.livemd) |
