# Concurrent Word Count

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Concurrent Word Count

Given a list of documents, use the [Task](https://hexdocs.pm/elixir/Task.html) module to concurrently find the total word count of every document combined.

For our purposes, a **word** will be any sequence of characters separated by a space. You do not have to handle invalid words, punctuation, or other special cases.

```elixir
document = """
This is my document document
"""

String.split(document, " ", trim: true)
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule WordCount do
  def individual_count(documents) do
    tasks =
      Enum.map(documents, fn document ->
        Task.async(fn ->
          document |> String.split(" ", trim: true) |> Enum.count()
        end)
      end)

    Task.await_many(tasks)
  end

  def total_count(documents) do
    documents |> individual_count() |> Enum.sum()
  end
end
```

</details>

Implement the `WordCount` module as documented below.

```elixir
defmodule WordCount do
  @moduledoc """
  Documentation for `WordCount`.
  """

  @doc """
  Concurrently count the number of words in each document.

  ## Examples

      iex> WordCount.individual_count(["document one", "document two"])
      [2, 2]
  """
  def individual_count(documents) do
    tasks =
      documents
      |> Enum.map(fn document ->
        Task.async(fn ->
          String.split(document, " ", trim: true)
          |> Enum.count()
        end)
      end)

    Task.await_many(tasks)
  end

  @doc """
  Concurrently count the number of words in each document and return
  the combined count.

  iex> WordCount.total_count(["document one", "document two"])
  4
  """
  def total_count(documents) do
    documents
    |> individual_count()
    |> Enum.sum()
  end
end
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"concurrent_word_count_reading\"\n    \"exercises\" -> \"concurrent_word_count_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "concurrent_word_count_reading"
    "exercises" -> "concurrent_word_count_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b concurrent-word-count-exercise
$ git add .
$ git commit -m "finish concurrent word count exercise"
$ git push origin concurrent-word-count-exercise
```

Create a pull request from your `concurrent-word-count-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                 | Next                                                               |
| ---------------------------------------- | -----------------------------------------------------------------: |
| [Tasks](../exercises/task_drills.livemd) | [Capstone Project Guide](../reading/capstone_project_guide.livemd) |
