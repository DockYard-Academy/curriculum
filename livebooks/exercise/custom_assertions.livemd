# Custom Assertions

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Assertions">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/meta_math.livemd">MetaMath</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/queues.livemd">Queues</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Custom Assertions

Create a `CustomAssertion.assert` macro which provides test feedback in the format:

<!-- livebook:{"force_markdown":true} -->

```elixir
"""
Assertion with `==` failed.

left: 1
right: 2
"""
```

Your solution should work with the `==`, `>`, `<`, `<=`, `>=`, and `===` operators.

Print a `"Success"` message if the assertion passes.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

If we want to have full control over the result, one solution would be to use multiple function heads (or any means of control flow) for each operator. However, if we don't have custom messages for each operator, we can cleverly use the `apply/3` function to keep our solution minimal.

```elixir
defmodule CustomAssertion do
  @success "Success!"

  def check(operator, left, right) do
    if apply(Kernel, operator, [left, right]) do
      @success
    else
      """
      Assertion with #{operator} failed.
      left: #{left}
      right: #{right}
      """
    end
  end

  defmacro assert({operator, _meta, [left, right]}) do
    quote do
      CustomAssertion.check(unquote(operator), unquote(left), unquote(right))
    end
  end
end
```

</details>

```elixir
defmodule CustomAssertion do
  defmacro assert({operator, _meta, [left, right]}) do
  end
end
```

Your solution should be able to display failure messages for the following assertions.

```elixir
require CustomAssertion

CustomAssertion.assert(1 == 2) |> IO.puts()
CustomAssertion.assert(1 === 2) |> IO.puts()
CustomAssertion.assert(1 > 2) |> IO.puts()
CustomAssertion.assert(1 >= 2) |> IO.puts()
CustomAssertion.assert(2 < 1) |> IO.puts()
CustomAssertion.assert(2 <= 1) |> IO.puts()
```

Your solution should display success messages for the following assertions.

```elixir
require CustomAssertion

CustomAssertion.assert(1 == 1) |> IO.puts()
CustomAssertion.assert(1 === 1) |> IO.puts()
CustomAssertion.assert(2 > 1) |> IO.puts()
CustomAssertion.assert(1 >= 1) |> IO.puts()
CustomAssertion.assert(1 < 2) |> IO.puts()
CustomAssertion.assert(1 <= 1) |> IO.puts()
```

## Commit Your Progress

DockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.

Run `git status` to ensure there are no undesirable changes.
Then run the following in your command line from the `curriculum` folder to commit your progress.

```
$ git add .
$ git commit -m "finish Custom Assertions exercise"
$ git push
```

We're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.

We also offer a paid course where you can learn from an instructor alongside a cohort of your peers.
We will accept applications for the June-August 2023 cohort soon.

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Custom Assertions">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/meta_math.livemd">MetaMath</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/queues.livemd">Queues</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
