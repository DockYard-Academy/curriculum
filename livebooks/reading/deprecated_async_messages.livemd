# Asynchronous Messages

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Asynchronous Messages">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/games_score_tracker.livemd">Games: Score Tracker</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/mailbox_server.livemd">Mailbox Server</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Review Questions

Upon completing this lesson, a student should be able to answer the following questions.

* How do we send a [GenServer](https://hexdocs.pm/elixir/GenServer.html) an asynchronous message and handle it?

## Fire And Forget

So far, we've seen only synchronous message sending, where every message blocks the calling process. To demonstrate, here's an example that simulates a [GenServer](https://hexdocs.pm/elixir/GenServer.html) with a slower operation.

```elixir
defmodule SlowServer do
  use GenServer

  @impl true
  def init(_opts) do
    {:ok, nil}
  end

  @impl true
  def handle_call(:sleep, _from, state) do
    IO.puts("Starting sleep")
    Process.sleep(1000)
    IO.puts("Ending sleep")
    {:reply, "response!", state}
  end
end

{:ok, pid} = GenServer.start_link(SlowServer, 0)
```

The caller process only continues when the slow server finishes the `handle_call/3` function.

```elixir
IO.puts("Caller starting")
response = GenServer.call(pid, :sleep)
IO.puts("Caller received: #{response}")
```

Most of the time, we want this behavior. This makes our code predictable, especially when we want to receive a response from the [GenServer](https://hexdocs.pm/elixir/GenServer.html). However, sometimes we want to **fire-and-forget**, meaning we send the [GenServer](https://hexdocs.pm/elixir/GenServer.html) a message so it can handle some work for us or update it's state without blocking the caller process.

For example, we can modify our `CounterServer` to use `handle_cast/2` to increment the count, then `handle_call/3` to return the updated count. We'll use [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to increment the count after one second.

`handle_cast/2` does not need to know the parent process, because it doesn't return a response. It returns `{:noreply, state}`.

```elixir
defmodule Counter do
  use GenServer

  @impl true
  def init(_opts) do
    {:ok, 0}
  end

  @impl true
  def handle_call(:get_count, _from, state) do
    {:reply, state, state}
  end

  @impl true
  def handle_cast(:increment, state) do
    IO.puts("count: #{state + 1}")
    Process.sleep(1000)
    {:noreply, state + 1}
  end
end

{:ok, pid} = GenServer.start_link(Counter, 0)
```

Now, even though it takes a second to increment the count, the caller process will be able to continue.

```elixir
GenServer.cast(pid, :increment)
GenServer.cast(pid, :increment)
GenServer.cast(pid, :increment)

IO.puts("not blocked!")
```

### Your Turn

Create a `Journal` [GenServer](https://hexdocs.pm/elixir/GenServer.html) that uses `handle_cast/2` to add journal entries. You can ensure this updates the `Journal` process's state using [:sys.get_state/1](https://www.erlang.org/doc/man/sys.html#get_state-1).

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, journal_pid} = GenServer.start_link(Journal, [])

GenServer.cast(journal_pid, {:add_entry, "first entry"})

["first entry"] = :sys.get_state(journal_pid)
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Journal do
  use GenServer

  @impl true
  def init(_opts) do
    {:ok, []}
  end

  @impl true
  def handle_cast({:add_entry, message}, entries) do
    {:noreply, [message | entries]}
  end
end
```

</details>

```elixir

```

## Process

We've seen we can use some [Kernel](https://hexdocs.pm/elixir/Kernel.html) functions for working with processes.

```elixir
pid =
  spawn(fn ->
    receive do
      :message -> IO.puts("I received a message")
    end
  end)

send(pid, :message)
```

Generally speaking, we won't use these functions directly and will use the [GenServer.call/3](https://hexdocs.pm/elixir/GenServer.html#call/3)
and [GenServer.cast/2](https://hexdocs.pm/elixir/GenServer.html#cast/2) functions for sending messages.

We'll also use the [Process](https://hexdocs.pm/elixir/Process.html) which provides some generic functions for working with processes and sending messages.

For example, we can send messages using [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) the same way we can with [Kernel.send/2](https://hexdocs.pm/elixir/Kernel.html#send/2).

```elixir
Process.send(self(), :message, [])

receive do
  :message -> "I received a message"
end
```

We also have a [Process.send_after/3](https://hexdocs.pm/elixir/Process.html#send_after/3) function for sending processes after a certain number of milliseconds.

```elixir
Process.send_after(self(), :message, 2000)

receive do
  :message -> "I received a message after 2 seconds"
end
```

A [GenServer](https://hexdocs.pm/elixir/GenServer.html) process can receive generic messages from other processes. It handles them using a `handle_info/2` callback function.

```elixir
defmodule Receiver do
  use GenServer

  def init(_opts) do
    {:ok, []}
  end

  def handle_info(:message, state) do
    IO.puts("Received a message!")
    {:noreply, state}
  end
end
```

Any messages sent using the [Process](https://hexdocs.pm/elixir/Process.html) module or generic [Kernel](https://hexdocs.pm/elixir/Kernel.html) functions can be handled using the generic `handle_info/2` function.

```elixir
{:ok, pid} = GenServer.start_link(Receiver, [])

Process.send(pid, :message, [])
```

A [GenServer](https://hexdocs.pm/elixir/GenServer.html) should not call it's own callback functions, as this can cause it to misbehave.

```elixir
defmodule MisbehavingGenServer do
  use GenServer

  def init(_opts) do
    {:ok, []}
  end

  def handle_call(:message, _from, state) do
    GenServer.call(self(), :talking_to_myself)
    IO.puts("Received a message!")
    {:reply, state}
  end

  def handle_call(:talking_to_myself, _from, state) do
    IO.puts("Sent a message to myself")
    {:reply, state}
  end
end
```

Uncomment and evaluate the code below, and you'll see the `MisbehavingGenServer` crashes, because it tries to send itself a message. Re-comment it when finished.

```elixir
# {:ok, pid} = GenServer.start_link(MisbehavingGenServer, [])

# GenServer.call(pid, :message)
```

Instead of sending itself a message using [GenServer.cast/2](https://hexdocs.pm/elixir/GenServer.html#cast/2) or [GenServer.call/3](https://hexdocs.pm/elixir/GenServer.html#call/3), a GenServer can send itself generic messages using [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) or [Process.send_after/4](https://hexdocs.pm/elixir/Process.html#send_after/4).

Often we'll use this to schedule some kind of recurring work. Here we have an example of a counter that automatically increments every second.

```elixir
defmodule IncrementingCounter do
  def init(_opts) do
    schedule_increment()
    {:ok, 0}
  end

  def handle_info(:increment, state) do
    schedule_increment()
    {:noreply, state + 1}
  end

  defp schedule_increment do
    Process.send_after(self(), :increment, 1000)
  end
end

{:ok, counter_pid} = GenServer.start_link(IncrementingCounter, [])
```

Re-evaluate the cell to see that the counter is constantly incrementing.

```elixir
:sys.get_state(counter_pid)
```

### Your Turn

Create a `DecrementingCounter` module which stores a counter in its state and decrements it every `500` milliseconds.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule DecrementingCounter do
  def init(_opts) do
    schedule_increment()
    {:ok, 0}
  end

  def handle_info(:decrement, state) do
    schedule_increment()
    {:noreply, state - 1}
  end

  defp schedule_increment do
    Process.send_after(self(), :decrement, 500)
  end
end

{:ok, counter_pid} = GenServer.start_link(DecrementingCounter, [])
```

</details>

```elixir

```

## Further Reading

Consider the following resource(s) to deepen your understanding of the topic.

* [HexDocs: Receiving "Regular" Messages](https://hexdocs.pm/elixir/1.14.1/GenServer.html#module-receiving-regular-messages)
* [HexDocs: GenServer](https://hexdocs.pm/elixir/GenServer.html#call/3)
* [ElixirLang: GenServer](https://elixir-lang.org/getting-started/mix-otp/genserver.html)
* [Exercism: GenServer](https://exercism.org/tracks/elixir/concepts/genserver)

## Commit Your Progress

DockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.

Run `git status` to ensure there are no undesirable changes.
Then run the following in your command line from the `curriculum` folder to commit your progress.

```
$ git add .
$ git commit -m "finish Asynchronous Messages reading"
$ git push
```

We're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.

We also offer a paid course where you can learn from an instructor alongside a cohort of your peers.
We will accept applications for the June-August 2023 cohort soon.

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Asynchronous Messages">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/games_score_tracker.livemd">Games: Score Tracker</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../exercises/mailbox_server.livemd">Mailbox Server</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
