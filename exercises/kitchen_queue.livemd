# Kitchen Queue

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Kitchen Queue

A FIFO (First In First Out) queue is a common pattern in programming with many applications.

FIFO is also a common term when managing inventory, meaning that older
items should be consumed before newer products.

We're going to apply the concept of a FIFO queue and build a kitchen management game.
Customer requests will be received, and saved in-memory.

<!-- livebook:{"force_markdown":true} -->

```elixir
Kitchen.request("burger with fries")
Kitchen.request("caesar salad")
```

Then the kitchen can prepare the oldest request in the queue.

<!-- livebook:{"force_markdown":true} -->

```elixir
"burger with fries" = Kitchen.prepare()
"caesar salad" = Kitchen.prepare()
```

You might consider using either a named [Agent](https://hexdocs.pm/elixir/Agent.html), `:ets`, or [GenServer](https://hexdocs.pm/elixir/GenServer.html) process to save the queue in-memory.
You may need to start a named process before calling the `Kitchen` module.

```elixir
defmodule Kitchen do
  def request(item) do
  end

  def prepare() do
  end
end
```

Test your solution by uncommenting and executing the code below.

```elixir
# Kitchen.request("burger with fries")
# Kitchen.request("caesar salad")
# "burger with fries" = Kitchen.prepare()
# "caesar salad" = Kitchen.prepare()
```

## Kitchen Stock Application

Happy with our previous work, we are asked to build an inventory management system for the kitchen stock.
Items in a kitchen are stored under a common `:name` and a unique `:id`.

<!-- livebook:{"force_markdown":true} -->

```elixir
Stock.store(%{name: :carton_of_eggs, id: 1})
Stock.store(%{name: :carton_of_eggs, id: 2})
```

We should be able to retrieve an item by it's name, and return the oldest items first.

<!-- livebook:{"force_markdown":true} -->

```elixir
%{name: :carton_of_eggs, id: 1} = Stock.retrieve(:carton_of_eggs)
%{name: :carton_of_eggs, id: 2} = Stock.retrieve(:carton_of_eggs)
```

There are many valid solutions, but you
might consider using a named `:ets` table with the `:bag` configuration.

You may need to start a named process before calling the `Stock` module.

Enter your solution below.

```elixir
defmodule Stock do
  def store(item) do
  end

  def retrieve(item_name) do
  end
end
```

Test your solution by uncommenting and executing the code below.

```elixir
# Stock.store(%{name: :carton_of_eggs, id: 1})
# Stock.store(%{name: :carton_of_eggs, id: 2})
# %{name: :carton_of_eggs, id: 1} = Stock.retrieve(:carton_of_eggs)
# %{name: :carton_of_eggs, id: 2} = Stock.retrieve(:carton_of_eggs)
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-kitchen_queue
$ git add .
$ git commit -m "finish kitchen queue exercise"
$ git push origin exercise-kitchen_queue
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                       | Next                           |
| ---------------------------------------------- | -----------------------------: |
| [Smart Cache](../exercises/smart_cache.livemd) | [File](../reading/file.livemd) |
