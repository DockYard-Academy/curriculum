# File System Todo

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Overview

```elixir
File.exists?("todolist.txt")
```

```elixir
# EXAMPLE SOLUTION

defmodule TodoList do
  @storage "todolist"

  def list do
    case File.read(@storage) do
      {:ok, list} -> :erlang.binary_to_term(list)
      # other operations will create the storage if it does not yet exist.
      _ -> []
    end
  end

  def add(item) do
    new_list = [item | list()]
    File.write(@storage, :erlang.term_to_binary(new_list))
  end

  def complete(item) do
    new_list = list() -- [item]
    File.write(@storage, :erlang.term_to_binary(new_list))
  end
end
```

```elixir
defmodule TodoList do
  @moduledoc """
  Documentation for `TodoList`
  """
  @doc """
  Retrieve the persistent todo list.

  ## Examples

      iex> TodoList.list()
      []
  """
  def list do
    if File.exists?("todolist.txt") do
      File.stream!("todolist.txt")
      |> Enum.to_list()
    else
      []
    end
  end

  @doc """
  Add an item to our persistent todo list.

  ## Examples

      iex> TodoList.add("finish homework")
      iex> TodoList.list()
      ["finish homework"]
      
      iex> TodoList.add("task 1")
      iex> TodoList.add("task 2")
      iex> TodoList.list()
      ["task 2", "task 1"]
  """
  def add(item) do
    new_list = [item | list()]
    File.write!("todolist.txt", new_list)
  end

  @doc """
  Complete (remove) and item from the persistent todo list.

  ## Examples

      iex> TodoList.add("finish homework")
      iex> TodoList.complete("finish homework")
      iex> TodoList.list()
      []
  """
  def complete(item) do
    updated_list = list() -- [item]
    File.write!("todolist.txt", updated_list)
  end
end
```

```elixir
File.ls()
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"file_system_todo_app_reading\"\n    \"exercises\" -> \"file_system_todo_app_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "file_system_todo_app_reading"
    "exercises" -> "file_system_todo_app_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b file-system-todo-app-exercise
$ git add .
$ git commit -m "finish file system todo app exercise"
$ git push origin file-system-todo-app-exercise
```

Create a pull request from your `file-system-todo-app-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                   | Next                                                 |
| ------------------------------------------ | ---------------------------------------------------: |
| [Save Game](../exercises/save_game.livemd) | [Document Tools](../exercises/document_tools.livemd) |
