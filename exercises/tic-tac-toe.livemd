# Tic-tac-toe

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Tic-tac-toe

You're going to create a game of [Tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe).

In Tic-tac-toe, players take turns placing either an `X` or an `O` onto a 3 by 3 grid.

The grid will be represented with the following coordinates.

![](images/tic_tac_toe_coordinates.png)

In this game, the player will say the coordinate they want to play, and either an `"X"` or an `"O"` like so:
This should return a new version of the board with that coordinate filled in.

<!-- livebook:{"force_markdown":true} -->

```elixir
board = [
  [nil, nil, nil],
  [nil, nil, nil],
  [nil, nil, nil]
]

move1 = TicTacToe.play(board, {0, 0}, "X")
[
  ["X", nil, nil],
  [nil, nil, nil],
  [nil, nil, nil]
]

TicTacToe.play(move1, {1, 1}, "O")
[
  ["X", nil, nil],
  [nil, "O", nil],
  [nil, nil, nil]
]
```

Enter your answer below.

```elixir
defmodule TicTacToe do
  @doc """
  Given a board, coordinate, and symbol of either `"X"` or `"O"`,
  returns a new updated board.

  ## Examples
  iex> TicTacToe.play([[nil, nil, nil], [nil, nil, nil],[nil, nil, nil]], {0, 0}, "X")
  [["X", nil, nil], [nil, nil, nil], [nil, nil, nil]]
  iex> TicTacToe.play([["X", nil, nil], [nil, nil, nil],[nil, nil, nil]], {1, 0}, "O")
  [["X", nil, nil], ["O", nil, nil], [nil, nil, nil]]
  iex> TicTacToe.play([["X", nil, nil], ["O", nil, nil],[nil, nil, nil]], {1, 1}, "X")
  [["X", nil, nil], ["O", "X", nil], [nil, nil, nil]]
  iex> TicTacToe.play( [["X", nil, nil], ["O", "X", nil],[nil, nil, nil]], {2, 2}, "O")
  [["X", nil, nil], ["O", "X", nil], [nil, nil, "O"]]
  """
  def play(board, coordinate, symbol) do
  end
end
```

### Bonus: Smart Tic Tac Toe

Create a `SmartTicTacToe` module which automatically determines if it should place an `"X"` or an `"O"` and ensures that a player cannot play in an already filled spot. The game should always start with `"X"`.

```elixir
defmodule SmartTicTacToe do
  defmodule TicTacToe do
    @doc """
    Given a board, coordinate, and symbol of either `"X"` or `"O"`,
    returns a new updated board.

    ## Examples
    iex> TicTacToe.play([[nil, nil, nil], [nil, nil, nil],[nil, nil, nil]], {0, 0})
    [["X", nil, nil], [nil, nil, nil], [nil, nil, nil]]
    iex> TicTacToe.play([["X", nil, nil], [nil, nil, nil],[nil, nil, nil]], {1, 0})
    [["X", nil, nil], ["O", nil, nil], [nil, nil, nil]]
    iex> TicTacToe.play([["X", nil, nil], ["O", nil, nil],[nil, nil, nil]], {1, 1})
    [["X", nil, nil], ["O", "X", nil], [nil, nil, nil]]
    iex> TicTacToe.play( [["X", nil, nil], ["O", "X", nil],[nil, nil, nil]], {2, 2})
    [["X", nil, nil], ["O", "X", nil], [nil, nil, "O"]]
    """
    def play(board, coordinate) do
    end
  end

  def play do
  end
end
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish tic-tac-toe exercise"
```
