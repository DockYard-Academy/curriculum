# Rock Paper Scissors Pattern Matching

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "#{__DIR__}/../utils"},
  {:tested_cell, git: "https://github.com/BrooklinJazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Create Rock Paper Scissors Using Pattern Matching

You're going to recreate your rock paper scissors game using pattern matching.

In the Elixir cell below,

* Create a module `RockPaperScissors`
* Create a `play/2` function that expects `:rock`, `:paper`, or `:scissors` for each parameter.
* `play/2` should return `"#{guess} beats #{guess}!"` or `"draw!"` depending on the outcome.

<!-- livebook:{"force_markdown":true} -->

```elixir
RockPaperScissors.play(:rock, :paper)
":paper beats :rock!"

RockPaperScissors.play(:rock, :rock)
"draw!"
```

```elixir
defmodule RockPaperScissors do
  def play(guess1, guess2) do
  end
end

Utils.feedback(:rock_paper_scissors_pattern_matching, RockPaperScissors)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish rps pattern matching exercise"
```
