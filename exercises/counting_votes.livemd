# Counting Votes

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Counting Votes

You're creating a voting system. Voters are entered in a list of votes. You will be given a specific vote to count.

For example, you might take a class vote of cats vs dogs vs birds to decide which animal is most popular.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
D1[dogs]
D2[dogs]
D3[dogs]
C1[cats]
C2[cats]
B1[birds]
```

<!-- livebook:{"break_markdown":true} -->

We'll determine the number of votes for a single value. For example, there are `3` dogs.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
D1[dogs]
D2[dogs]
D3[dogs]
C1[cats]
C2[cats]
B1[birds]

style D1 fill:lightgreen
style D2 fill:lightgreen
style D3 fill:lightgreen
```

<!-- livebook:{"break_markdown":true} -->

So we would return `3` votes for dogs.

<!-- livebook:{"force_markdown":true} -->

```elixir
Votes.count([:dogs, :dogs, :dogs, :cats, :cats, :birds], :dogs)
3
```

```elixir
defmodule Votes do
  @doc """
  Count the number of votes.

  ## Examples

    iex> Votes.count([:dogs, :dogs, :dogs, :cats], :dogs)
    3

    iex> Votes.count([:dogs, :dogs, :dogs, :cats], :cats)
    1

    iex> Votes.count([:apples, :oranges, :apples, :cats], :birds)
    0
  """
  def count(votes, vote) do
  end
end
```

## Bonus: Voter Tally

Counting each vote for dogs, cats, and birds becomes tedius. So, we instead want to determine the number of votes for each all at once.

```mermaid
flowchart
D1[dog]
D2[dog]
D3[dog]
C1[cat]
C2[cat]
B1[bird]

style D1 fill:lightgreen
style D2 fill:lightgreen
style D3 fill:lightgreen

style C1 fill:orange
style C2 fill:orange
style B1 fill:lightblue

```

There are `3` dogs, `2` cats, and `1` bird.

```elixir
defmodule Votes do
  @doc """
  Determine the number of votes for each option received.

  ## Examples

    iex> Votes.tally([:dog, :dog, :cat, :cat, :cat, :bird])
    %{dog: 2, cat: 3, bird: 1}
  """
  def tally(votes) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-counting_votes
$ git add .
$ git commit -m "finish counting votes exercise"
$ git push origin exercise-counting_votes
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                     | Next                                             |
| ------------------------------------------------------------ | -----------------------------------------------: |
| [Named Number Lists](../exercises/named_number_lists.livemd) | [Measurements](../exercises/measurements.livemd) |
