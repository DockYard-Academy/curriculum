# Rubber Ducky

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Rubber Ducky

![](images/duck.png)

<!-- livebook:{"break_markdown":true} -->

In order to work through difficult problems, Developers often use a program solving tool called rubber ducking. Essentially, we explain a problem to someone or something (usually a rubber duck) in order to help debug it and understand it.

You're going to use LiveView to create a rubber ducking tool similar to [duckie.me](http://duckie.me/) that will accept some user input, and display a helpful debugging tip based on the text message.

The questions the user asks and the answer the "duck" provides should be saved in state and displayed on the page. Choose a default answer for all questions such as `"Have you tried turning it off and on again?"`.

For example:

> question: "I have a hard problem I'm working on"

> answer: "have you tried turning it off and on again?"

> question: "My tests are failing!"

> answer: "have you tried turning it off and on again?"

<!-- livebook:{"break_markdown":true} -->

Create your `RubberDuck` project in the projects folder.

```
$ mix phx.new rubber_duck --live
```

## Bonus: Better Answers

Improve the quality of your answers. For example, you might look for keywords in the question, and provide answers based on the keyword.

> question: "My tests are failing!"

> answer: "Having trouble with tests? Consider reading [ExUnit Documentation](https://hexdocs.pm/ex_unit/ExUnit.html) or [Testing Elixir](https://pragprog.com/titles/lmelixir/testing-elixir/)"

## Bonus: Make It Pretty

Spend some time improving the styles of your rubber duck site. This project could serve as an excellent portfolio piece for you in the future!

You might consider loosely cloning the styles of [duckie.me](http://duckie.me/).

## Bonus: Ship It

Use a deployment platform such as [Gigalixir](https://hexdocs.pm/phoenix/gigalixir.html) to deploy your duckie application.

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-rubber_ducky
$ git add .
$ git commit -m "finish rubber ducky exercise"
$ git push origin exercise-rubber_ducky
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                   | Next                                                               |
| ------------------------------------------ | -----------------------------------------------------------------: |
| [Math Game](../exercises/math_game.livemd) | [Capstone Project Mock](../exercises/capstone_project_mock.livemd) |
