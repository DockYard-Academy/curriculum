# Blog: Posts

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Blog: Posts

You're going to create the `Posts` resource in your [Blog](./group_project_blog.livemd) project.

Blog posts should have a `title`, `subtitle`, and `content`. It should also have relevant timestamp information.

```mermaid
classDiagram
  class Post {
    title: :string
    subtitle: :string
    content: :text
  }
```

You may use [Phoenix Generators](https://hexdocs.pm/phoenix/Mix.Tasks.Phx.Gen.Html.html) or create the Controller, Context, and other infrastructure for the post resource or you may create it all from scratch.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

Generate the resource.

```elixir
$ mix phx.gen.html Posts Post posts title:string subtitle:string content:text
$ mix ecto.migrate
```

Then add the resource to `router.ex`.

```elixir
scope "/", BlogWeb do
  pipe_through :browser

  get "/", PageController, :index
  resources "/posts", PostController
end
```

Alternatively we can define every route individually.

```elixir
scope "/", BlogWeb do
  pipe_through :browser

  get "/", PageController, :index
  get "/posts", PostController, :index
  get "/posts/new", PostController, :new
  post "/posts", PostController, :create
  get "/posts/:id", PostController, :show
  get "/posts/:id/edit", PostController, :edit
  put "/posts/:id", PostController, :update
  patch "/posts/:id", PostController, :update
  delete "/posts/:id", PostController, :delete
end
```

</details>

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"blog_posts_reading\"\n    \"exercises\" -> \"blog_posts_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "blog_posts_reading"
    "exercises" -> "blog_posts_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b blog-posts-exercise
$ git add .
$ git commit -m "finish blog posts exercise"
$ git push origin blog-posts-exercise
```

Create a pull request from your `blog-posts-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                              | Next                                                         |
| ----------------------------------------------------- | -----------------------------------------------------------: |
| [Drills: SQL Queries](../exercises/sql_drills.livemd) | [BookSearch: Authors](../reading/book_search_authors.livemd) |
