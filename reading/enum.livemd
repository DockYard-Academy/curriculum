# Enum

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:smart_animation, github: "brooklinjazz/smart_animation"},
  {:visual, github: "brooklinjazz/visual"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Overview

Often while programming, you run into problems where you need the ability
to do something many many times.

For example, let's say you're creating a shopping application.
In this application, customers create a shopping list.

You're responsible for displaying the cost of each item to the user
after taxes.

Given a list of costs in pennies, how might you do that
with what you've learned so far?

<!-- livebook:{"force_markdown":true} -->

```elixir
[100, 200, 150, 200]
```

With only four items, That would still be a fairly difficult task.
You would have to extract out each value with pattern matching, and
then apply some `calculate_tax/1` function to each value, then rebuild
a new list with the new values

<!-- livebook:{"force_markdown":true} -->

```elixir
[one, two, three, four] = [100, 200, 150, 200]

[calculate_tax.(one), calculate_tax.(two), calculate_tax.(three), calculate_tax.(four)]
```

However the above would only work for four items, you would need
to create different cases for every size of list you want to support.

<!-- livebook:{"force_markdown":true} -->

```elixir
list = [100, 200, 150, 200]

case list do
  [] -> []
  [one] -> [calculate_tax.(one)]
  [one, two] -> [calculate_tax.(one), calculate_tax.(two)]
  [one, two, three] -> [calculate_tax.(one), calculate_tax.(two), calculate_tax.(three)]
  [one, two, three, four] -> [calculate_tax.(one), calculate_tax.(two), calculate_tax.(three), calculate_tax.(four)]
end
```

Now imagine if you had to support a hundred items. Or if you
have enterprise customers who buy thousands of items! This simply doesn't
scale.

To handle scenarios where we need to repeat an action over and over
again, we can use **enumeration**. Enumeration is the act of looping through a collection and reading
its elements for the sake of returning some output.

```mermaid
flowchart LR
  Input ---> Enumeration --> Function --> Enumeration
  Enumeration --> Output
```

With enumeration, we can `calculate_tax/1` on any number of items with a single line.

<!-- livebook:{"force_markdown":true} -->

```elixir
Enum.map(list, fn item -> calculate_tax(item) end)
```

## Enum

We use the [Enum](https://hexdocs.pm/elixir/Enum.html) module to accomplish enumeration. The Enum module contains
a large amount of useful functions that all work on enumerable data types.

Certain [Collections](https://elixirschool.com/en/lessons/basics/collections) implement the [Enumerable](https://hexdocs.pm/elixir/Enumerable.html) protocol, which allows us to use [Enum](https://hexdocs.pm/elixir/1.12/Enum.html) functions with them.

We are already familiar with most enumberable collections, such as **lists**, **keyword lists**, and **maps**.

We'll focus on common [Enum](https://hexdocs.pm/elixir/Enum.html) functions you'll use frequently.

* [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) enumerate over every element and create a new collection with a new value.
* [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) and [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3). Enumerate over every element into an accumulated value.
* [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) filter out elements from a collection.
* [Enum.all/2](https://hexdocs.pm/elixir/Enum.html#all/2) check if all elements in a collection match some condition.
* [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) check if any elements in a collection match some condition.
* [Enum.count/2](https://hexdocs.pm/elixir/Enum.html#count/2) return the number of elements in a collection collection.
* [Enum.find/3](https://hexdocs.pm/elixir/Enum.html#find/3) return an element in a collection that matches some condition.
* [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) return a random element in a collection.

Anytime we're working with a collection, we should refer to the [Enum](https://hexdocs.pm/elixir/Enum.html) module to see if it has a built-in solution we can use. Alternatively, we can build nearly all functionality using only [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2), [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3), and [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) so consider developing the most familiarity with these three functions.

## Enum.map/2

[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) allows you to enumerate through the collection you provide it as its first argument. It then calls a function that you provide it as its second argument on each element. Finally it returns a new collection with the modified values.

```mermaid
flowchart LR
  A[Collection] --> E[Enum.map]
  E --> Function
  Function --> E
  E --> B[New Collection]
```

Here's an example that doubles all the integers in a list.

```elixir
Enum.map([1, 2, 3, 4], fn integer -> integer * 2 end)
```

```mermaid
flowchart LR
  A["[1, 2, 3, 4]"] --> E[Enum.map]
  E --> F["fn integer -> integer * 2 end"]
  F --> E
  E --> B["[2, 4, 6, 8]"]
```

<!-- livebook:{"break_markdown":true} -->

It's useful to be aware that you can use ranges with enumerables to easily enumerate over large
ranges without needing to define every element in the list.

```elixir
Enum.map(1..100, fn integer -> integer * 2 end)
```

[Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2) accepts any enumerable collection, and always returns a list, regardless of the input.

**keyword lists** and **maps** will be treated as lists of tuples for the sake of enumeration.

```elixir
Enum.map(%{"one" => 1, "two" => 2}, fn element -> element end)
```

```elixir
Enum.map([one: 1, two: 2], fn element -> element end)
```

We can even pattern match on the key and value in the tuple.

```elixir
Enum.map(%{"one" => 1, "two" => 2}, fn {_key, value} -> value end)
```

```elixir
Enum.map([one: 1, two: 2], fn {key, _value} -> key end)
```

### Your Turn

Use [Enum.map/2](https://hexdocs.pm/elixir/1.12/Enum.html#map/2) to convert every number in the following `list` to a string.

<!-- livebook:{"force_markdown":true} -->

```elixir
["1", "2", "3", "4", "5", "6", "7", "8", "9"]
```

```elixir
list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
```

### Your Turn

Use [Enum.map/2](https://hexdocs.pm/elixir/1.12/Enum.html#map/2) with `list` to create a keyword list `[{:one, 1}, {:two, 2}]`.

**Bonus**: change `list` to `[1, 2, 3, 4, 5, 6, 7, 8, 9]` and ensure your solution returns the following:

<!-- livebook:{"force_markdown":true} -->

```elixir
[one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9]
```

```elixir
list = [1, 2]
```

## Enum.reduce/2 and Enum.reduce/3

[Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) allows you to enumerator over a collection and build up an accumulated value with each enumeration.

Unlike [Enum.map/2](https://hexdocs.pm/elixir/1.12/Enum.html#map/2) this gives you significantly more control over your output, as the data type of the accumulator and return value do not have to be a list.

```mermaid
flowchart LR
  A[Collection] --> E[Enum.reduce]
  E -- Accumulator --> Function
  Function -- Accumulator --> E
  E --Final Accumulator--> B[Output]
```

<!-- livebook:{"break_markdown":true} -->

For example, we can sum all of the numbers in a list by building up an accumulated sum.

```elixir
list = [1, 2, 3, 4]

Enum.reduce(list, fn integer, accumulator -> integer + accumulator end)
```

The function you provide as the second argument of [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) will be called with the current element, and current accumulator.

The first value in the collection will be the initial accumulator value.

<!-- livebook:{"attrs":{"source":"frames = [\n      \"\nFirst, we define the call the [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) function with a list, and a function.\n```elixir\nEnum.reduce([1, 2, 3, 4], fn integer, accumulator -> integer + accumulator  end)\n```\n\",\n      \"\nThe first element in the list `1` is the initial accumulator value.\n```elixir\nEnum.reduce([2, 3, 4], fn integer, 1 -> integer + 1  end)\n```\n\",\n      \"\nThe function is called on the next element `2`. The next accumulator is 2 + 1\n```elixir\nEnum.reduce([3, 4], fn 2, 1 -> 2 + 1  end)\n```\n\",\n      \"\nThe function is called on the next element `3`. The next accumulator is 3 + 3\n```elixir\nEnum.reduce([4], fn 3, 3 -> 3 + 3  end)\n```\n\",\n      \"\nThe function is called on the next element `4`. The next accumulator is 4 + 6\n```elixir\nEnum.reduce([], fn 4, 6 -> 4 + 6  end)\n```\n\",\n      \"\n4 + 6 equals 10.\n```elixir\nEnum.reduce([], fn 4, 6 -> 10  end)\n```\n\",\n      \"\n`10` is the last accumulator value, so [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) returns `10`.\n```elixir\n                           10\n```\n\"\n    ]\n\nSmartAnimation.new(0..Enum.count(frames) - 1, fn i ->\n    Kino.Markdown.new(Enum.at(frames, i))\nend)","title":"Reduce"},"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

````elixir
frames = [
  "
First, we define the call the [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) function with a list, and a function.
```elixir
Enum.reduce([1, 2, 3, 4], fn integer, accumulator -> integer + accumulator  end)
```
",
  "
The first element in the list `1` is the initial accumulator value.
```elixir
Enum.reduce([2, 3, 4], fn integer, 1 -> integer + 1  end)
```
",
  "
The function is called on the next element `2`. The next accumulator is 2 + 1
```elixir
Enum.reduce([3, 4], fn 2, 1 -> 2 + 1  end)
```
",
  "
The function is called on the next element `3`. The next accumulator is 3 + 3
```elixir
Enum.reduce([4], fn 3, 3 -> 3 + 3  end)
```
",
  "
The function is called on the next element `4`. The next accumulator is 4 + 6
```elixir
Enum.reduce([], fn 4, 6 -> 4 + 6  end)
```
",
  "
4 + 6 equals 10.
```elixir
Enum.reduce([], fn 4, 6 -> 10  end)
```
",
  "
`10` is the last accumulator value, so [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) returns `10`.
```elixir
                           10
```
"
]

SmartAnimation.new(0..(Enum.count(frames) - 1), fn i ->
  Kino.Markdown.new(Enum.at(frames, i))
end)
````

### Enum.reduce/3

Alternatively, we can provide a default value for the accumulator with [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3).

[Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) will call the function on every element, rather than setting the initial accumulator as the first element. Below, we sum all of the numbers in the list, with an initial sum of `10`.

```elixir
Enum.reduce([1, 2, 3], 10, fn integer, accumulator -> integer + accumulator end)
```

### Your Turn

Use [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3) or [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) to sum all of the even numbers in the `list`.

<!-- livebook:{"attrs":{"assertions":"assert list == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"The `list` should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\nassert sum == 2 + 4 + 6  + 8 + 10","attempts":1,"code":"list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n\r\nsum = nil","solution":"list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nEnum.reduce(list, 0, fn int, acc ->\n  if rem(int, 2) == 0 do\n    acc + int\n  else\n    acc\n  end\nend)","title":"Sum Even Numbers"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Sum Even Numbers" do
    try do
      Process.flag(:trap_exit, true)
      list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

      sum = nil

      assert list == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
             "The `list` should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"

      assert sum == 2 + 4 + 6 + 8 + 10
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a `handle_call/3`, `handle_info/2`, or `handle_cast/2` or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Then ensure you call `GenServer.call/2`, `GenServer.cast/2`, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

sum = nil
```

## Enum.filter

The [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) function allows us to filter elements in a collection. [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) calls the function with each element in the collection. If the function returns `false` then the element is filtered out.

```mermaid
flowchart LR
  C[Collection] --> E[Enum.filter]
  E --> F[Function]
  F -- boolean --> E
  F --> true --> A[Keep]
  F --> false --> B[Remove]
  E --> O[Filtered Collection]
```

```elixir
Enum.filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], fn integer -> integer <= 5 end)
```

### Your Turn

use [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2) to create a list of `odd_numbers` and a list of `even_numbers` using the following `list`.

<!-- livebook:{"attrs":{"assertions":"assert list == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"`list` should be [1, 2, 3, 4, 5, 6, 7, 8, 9].\"\nassert odd_numbers == [1, 3, 5, 7, 9]\nassert even_numbers == [2, 4, 6, 8]","attempts":1,"code":"list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\nodd_numbers = nil\r\n\r\neven_numbers = nil","solution":"list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nodd_numbers = Enum.filter(list, fn int -> rem(int, 2) == 1 end)\n\neven_numbers = Enum.filter(list, fn int -> rem(int, 2) == 0 end)","title":"Filter Even Numbers"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Filter Even Numbers" do
    try do
      Process.flag(:trap_exit, true)
      list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

      odd_numbers = nil

      even_numbers = nil
      assert list == [1, 2, 3, 4, 5, 6, 7, 8, 9], "`list` should be [1, 2, 3, 4, 5, 6, 7, 8, 9]."
      assert odd_numbers == [1, 3, 5, 7, 9]
      assert even_numbers == [2, 4, 6, 8]
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it recieved: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a `handle_call/3`, `handle_info/2`, or `handle_cast/2` or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Then ensure you call `GenServer.call/2`, `GenServer.cast/2`, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results 
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

odd_numbers = nil

even_numbers = nil
```

## Enum.all?/2 and Enum.any?/2

We use [Enum.all/2](https://hexdocs.pm/elixir/Enum.html#all/2) and [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) to check elements in a collection for some condition and return either `false` or `true` depending on if the function called on each element returned `true` or `false`.

[Enum.all/2](https://hexdocs.pm/elixir/Enum.html#all/2) returns `true` if **all** elements in the collection returned `true`, and `false` if **one** element in the collection returned `false`.

[Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) returns `true` if **any** elements in the collection returned `true` and `false` if **all** elements in the collection returned `false`.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
Collection --> E[Enum.all?/2 or Enum.any?/2]
E --> Function
Function -- boolean --> E
E --> Boolean
```

<!-- livebook:{"break_markdown":true} -->

For example, this function below checks if all of the elements in a list are below `10`. There is one element above `10` (`20`) so it returns `false`.

```elixir
Enum.all?([1, 2, 20], fn integer -> integer < 10 end)
```

The same collection and function with [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) returns true because one or more elements are below `10`.

```elixir
Enum.any?([1, 2, 20], fn integer -> integer < 10 end)
```

[Enum.all/2](https://hexdocs.pm/elixir/Enum.html#all/2) will stop the moment an element called with the function returns `false`. [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) will end the moment any element returns `true`.

This means both can be performant with large lists, so long as they exit early.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

Evaluate the cell below, notice that it completes instantly. Then change `to_find` to `10000000`. Notice it takes significantly longer, because [Enum.any?/2](https://hexdocs.pm/elixir/Enum.html#any?/2) must check every element before it finally finds the last element that passes the condition.

```elixir
to_find = 1

Enum.any?(1..10_000_000, fn int -> int == to_find end)
```

### Your Turn

Evaluate the cell below, notice that it completes instantly, then change `to_find` to `10000000`. Notice it takes significantly longer, because [Enum.all/2](https://hexdocs.pm/elixir/Enum.html#all/2) must check every element before it finally finds the last element that fails the condition.

```elixir
to_find = 1

Enum.all?(1..10_000_000, fn int -> int < to_find end)
```

## Enum.count/1

[Enum.count/1](https://hexdocs.pm/elixir/Enum.html#count/1) returns the number of items in a collection.

```mermaid
flowchart LR
  Collection --> Enum.count --> Integer
```

```elixir
Enum.count([1, 2, 3])
```

The type of elements does not matter. Collections with multiple elements still only count as a single individual element.

```elixir
Enum.count([{}, "hello", %{}, [[[]]]])
```

### Your Turn

In the Elixir cell below, count the number of elements in the `collection`. It should return `5`.

```elixir
collection = [1, 2, 3, 4, 5]
```

## Enum.find/3

[Enum.find/3](https://hexdocs.pm/elixir/Enum.html#find/3) takes in a collection and a function. then searches the collection and returns the first element that returns true when called as the argument to the passed in function.

```elixir
Enum.find(["hello", 2, 10], fn each -> is_integer(each) end)
```

If no element is found, [Enum.find/2](https://hexdocs.pm/elixir/Enum.html#find/2) returns `nil`.

```elixir
Enum.find(["h", "e", "l", "l", "o"], fn each -> is_integer(each) end)
```

You might notice the arity of the function is `3` even though we passed in only `2` arguments. That's because there's an optional `default` value argument. The `default` value will be returned instead of `nil` if no element is found.

```elixir
Enum.find(["h", "e", "l", "l", "o"], 10, fn each -> is_integer(each) end)
```

### Your Turn

In the Elixir cell below, use [Enum.find/2](https://hexdocs.pm/elixir/Enum.html#find/2) to find the first even number in this list, which should be `2`.

```elixir
list = [1, 2, 3, 4, 5]
```

## Enum.random/1

[Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) returns a random element in a collection. It's often used to generate random numbers in a range.

```elixir
Enum.random(1..10)
```

### Your Turn

In the Elixir cell below, use [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) to retrieve a random element from the `collection`.

```elixir
collection = ["one", 3, {}]
```

## Capture Operator and Module Functions

When we provide a function to any of the [Enum](https://hexdocs.pm/elixir/Enum.html) functions. When we pass a function as the argument to another function it's called a **callback function**.

That's because the function is called by the function it is passed into. We'll bind this function to a variable and inspect every value to demonstrate.

```elixir
my_function = fn element -> IO.inspect(element) end

Enum.map(1..10, my_function)
```

Instead of providing an anonymous function, we can use the capture operator `&` syntax to provide module functions.

```elixir
defmodule NonAnonymous do
  def function(element) do
    IO.inspect(element)
  end
end

Enum.map(1..10, &NonAnonymous.function/1)
```

We can also use the capture operator alone to create an anonymous function. However, we generally don't recommend this as it typically reduces readability. `&1` is the first argument to the function.

```elixir
Enum.map(1..10, &(&1 * 2))
```

Alternatively, we can simply use an anonymous function with the module function. This is especially necessary if each element of the collection doesn't match the arity or type of the arguments to the module function.

```elixir
Enum.map(1..10, fn int -> NonAnonymous.function(int) end)
```

## Further Reading

The [Enum](https://hexdocs.pm/elixir/Enum.html) module has many more functions. You'll have the opportunity to encounter more as you need them to solve future challenges.

For more information, you may also wish to read:

* [The Enum Documentation](https://hexdocs.pm/elixir/Enum.html)
* [Elixir Schools Enum](https://elixirschool.com/en/lessons/basics/enum)

We have several exercises dedicated to the [Enum](https://hexdocs.pm/elixir/Enum.html) module as part of this curriculum. However, if you wish for more practice [Exercism.io](https://exercism.org/tracks/elixir/concepts/enum) has a number of excellent exercises.

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish enum section"
```

## Up Next

| Previous                           | Next                                                 |
| ---------------------------------- | ---------------------------------------------------: |
| [Ranges](../reading/ranges.livemd) | [Non Enumerables](../reading/non_enumerables.livemd) |
