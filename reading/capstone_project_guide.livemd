# Capstone Project Guide

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Capstone Project

The capstone project is the final project for the DockYard Academy Course. This project is an opportunity to apply the skills and knowledge you have learned throughout this course to a real-world problem of your choosing.

<!-- livebook:{"break_markdown":true} -->

### Requirements

Your capstone project should incorporate two or more of the following features:

* Use Phoenix LiveView and PubSub to build a real-time distributed feature.
* Use Ecto to connect to a Database and manage one or more associations (one-to-one, one-to-many, many-to-many).
* Interact with an external API or service such as SendGrid.

If you have a project idea that deviates from these requirements but still adequately demonstrates what you have learned in this course, then speak with your instructor to request approval.

<!-- livebook:{"break_markdown":true} -->

### Planning

Students will use an organizational kanban system, such as [GitHub Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/quickstart-for-projects#creating-a-user-project), to plan their capstone project.
We recommend prioritizing features into **must-haves** and **nice-to-have**.

We recommend you design your application using a hand-drawn design or software such as [Figma](https://www.figma.com/).

Ideally, when prioritizing features, you should start with a very small MVP (Minimum Viable Product) you can easily accomplish within the timeframe and extra features you can build to make the project truly impressive.

<!-- livebook:{"break_markdown":true} -->

### Presentation

Students will present their capstone project publicly to the Elixir community. During your presentation, we recommend you:

* Summarize the technologies (languages, frameworks, APIs, services, etc.) used in the project.
* Demonstrate the main features of your project.
* Share a particularly challenging or compelling piece of code.
* Any features you would like to add to the project if you were to expand it after the academy.

You will have ten minutes to present your project and five minutes to answer audience questions. Consider timing yourself and practice your transitions from feature to feature to prepare.

Double-check that your application works as expected before you present to avoid embarrassing bugs!

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"capstone_project_guide_reading\"\n    \"exercises\" -> \"capstone_project_guide_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "capstone_project_guide_reading"
    "exercises" -> "capstone_project_guide_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b capstone-project-guide-reading
$ git add .
$ git commit -m "finish capstone project guide reading"
$ git push origin capstone-project-guide-reading
```

Create a pull request from your `capstone-project-guide-reading` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                           | Next                                     |
| ------------------------------------------------------------------ | ---------------------------------------: |
| [Concurrent Word Count](../exercises/concurrent_word_count.livemd) | [HTML + CSS](../reading/html_css.livemd) |
