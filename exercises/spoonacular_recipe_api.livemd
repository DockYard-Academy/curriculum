# Spoonacular Recipe API

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:httpoison, "~> 1.8"},
  {:poison, "~> 5.0"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Spoonacular Recipe API

[Spoonacular](https://spoonacular.com/) is a popular food API.

Create a free Spoonacular to get your API key. You can view your API key in the [Spoonacular Console](https://spoonacular.com/food-api/console#Dashboard).

### Browser Request

Use your API to visit the `https://api.spoonacular.com/recipes/complexSearch?apiKey=API_KEY` URL where API_KEY should be your API key from the console.

### HTTPoison Request

Use [HTTPoison](https://hexdocs.pm/httpoison/HTTPoison.html) to retrieve the same JSON data from the `https://api.spoonacular.com/recipes/complexSearch?apiKey=API_KEY` URL you visited in the browser. Then use [Poison](https://hexdocs.pm/poison/Poison.html) to decode the JSON response into an Elixir data structure.

```elixir
response =
  case HTTPoison.get(
         "https://api.spoonacular.com/recipes/complexSearch?apiKey=ec55b0a4c7aa4ec0999a01f1a48078cf"
       ) do
    {:ok, %HTTPoison.Response{status_code: 200, body: body}} ->
      Poison.decode!(body)
  end
```

```elixir
gifff =
  HTTPoison.get(
    "https://api.giphy.com/v1/gifs/random?api_key=bRHycByRUEEdN80uNt0eQEsIsudz47i2&tag=&rating=g"
  )

case gifff do
  {:ok, %HTTPoison.Response{status_code: 200, body: body}} ->
    data = Poison.decode!(body)
    Kernel.get_in(data, ["data", "embed_url"])
end

# case HTTPoison.get("https://pokeapi.co/api/v2/pokemon/#{name}") do
#       {:ok, %HTTPoison.Response{status_code: 200, body: body}} ->
#         response = Poison.decode!(body)
#         stats = response["stats"]
#         [head | _tail] = stats

#         stat_map =
#           Enum.reduce(stats, %{}, fn each, acc ->
#             base_stat = Map.get(each, "base_stat")
#             key = Kernel.get_in(each, ["stat", "name"])
#             Map.put(acc, key, base_stat)
#           end)

#         types = response["types"]
#         [first_type, second_type] = types
#         type_name1 = Kernel.get_in(first_type, ["type", "name"])
#         type_name2 = Kernel.get_in(second_type, ["type", "name"])
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"spoonacular_recipe_api_reading\"\n    \"exercises\" -> \"spoonacular_recipe_api_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "spoonacular_recipe_api_reading"
    "exercises" -> "spoonacular_recipe_api_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b spoonacular-recipe-api-exercise
$ git add .
$ git commit -m "finish spoonacular recipe api exercise"
$ git push origin spoonacular-recipe-api-exercise
```

Create a pull request from your `spoonacular-recipe-api-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                       | Next                                           |
| ------------------------------ | ---------------------------------------------: |
| [APIs](../reading/apis.livemd) | [Pokemon API](../exercises/pokemon_api.livemd) |
