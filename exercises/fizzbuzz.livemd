# FizzBuzz

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## FizzBuzz

In the Elixir cell below create a Module `FizzBuzz` with a function `run/1` which takes in a **range**.

Enumerate through the integers and return a new list where

* integers divisible by `3` are replaced with `fizz`
* integers divisible by `5` are replaced with `buzz`
* integers divisible by `3` and `5` are replaced with `fizzbuzz`
* integers not matching the above stay the same.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
FizzBuzz.run(1..15)
[1, 2, "fizz", 4, "buzz", "fizz", 7, 8, "fizz", "buzz", 11, "fizz", 13, 14, "fizzbuzz"]
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Example Solution</summary>

  ```elixir
  defmodule FizzBuzz do
    def run(range) do
      Enum.map(range, fn int ->
        cond do
          rem(int, 3) == 0 and rem(int, 5) == 0 -> "fizzbuzz"
          rem(int, 3) == 0 -> "fizz"
          rem(int, 5) == 0 -> "buzz"
          true -> int
        end
      end)
    end
  end

  FizzBuzz.run(1..100)
  ```
</details>

Enter your solution below.

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=QPZ0pIK_wsc&ab_channel=TomScott\")","title":"FizzBuzz"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=QPZ0pIK_wsc&ab_channel=TomScott")
```

```elixir
defmodule FizzBuzz do
  @doc """
  FizzBuzz.

  ## Examples

    iex> FizzBuzz.run(1..15)
    [1, 2, "fizz", 4, "buzz", "fizz", 7, 8, "fizz", "buzz", 11, "fizz", 13, 14, "fizzbuzz"]

    iex> FizzBuzz.run(10..15)
    ["buzz", 11, "fizz", 13, 14, "fizzbuzz"]
  """
  def run(range) do
    Enum.map(range, fn integer ->
      cond do
        rem(integer, 15) == 0 -> "fizzbuzz"
        rem(integer, 3) == 0 -> "fizz"
        rem(integer, 5) == 0 -> "buzz"
        true -> integer
      end
    end)
  end
end
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"fizzbuzz_reading\"\n    \"exercises\" -> \"fizzbuzz_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "fizzbuzz_reading"
    "exercises" -> "fizzbuzz_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b fizzbuzz-exercise
$ git add .
$ git commit -m "finish fizzbuzz exercise"
$ git push origin fizzbuzz-exercise
```

Create a pull request from your `fizzbuzz-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                       | Next                                                         |
| ------------------------------ | -----------------------------------------------------------: |
| [Enum](../reading/enum.livemd) | [Named Number Lists](../exercises/named_number_lists.livemd) |
