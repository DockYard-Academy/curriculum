# Battle Map

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Overview

You're developing a 2D tactical combat game.

Characters in your game fight on a grid of potentially infinite size.
![](images/battle_map.png)

## Character Attack

You're going to create a `Character.can_attack?/3` function
that expects the following:

1. A struct
2. The player's coordinate `{x, y}`
3. An enemy's coordinate `{x, y}`

It should then return a boolean.

### Wizard

A <b style="color: purple;">Wizard</b> can attack in straight or diagonal lines of any length.

![](images/wizard_grid.png)

We've created a `Wizard` struct below. It does not need to store any information in the struct.

```elixir
defmodule Wizard do
  defstruct []
end
```

A <b style="color: red;">Barbarian</b> can attack in 2 square radius.

![](images/barbarian_grid.png)

We've created a `Barbarian` struct below. It does not need to store any information in the struct.

```elixir
defmodule Barbarian do
  defstruct []
end
```

You should be able to check if a character can attack a coordinate `{x, y}` given their
starting location in `{x, y}`.

<!-- livebook:{"force_markdown":true} -->

```elixir
Character.can_attack?(%Barbarian{}, {4, 4}, {6, 6})
true
```

![](images/barbarian_attack.png)

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
Character.can_attack?(%Wizard{}, {4, 4}, {6, 6})
true
```

![](images/wizard_attack.png)

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defprotocol Character do
  def can_attack?(character, origin, target)
end

defimpl Character, for: Wizard do
  def can_attack?(_character, {init_x, init_y}, {x, y}) do
    x_diff = init_x - x
    y_diff = init_y - y

    init_x == x || init_y == y || abs(x_diff) == abs(y_diff)
  end
end

defimpl Character, for: Barbarian do
  def can_attack?(_character, {init_x, init_y}, {x, y}) do
    x_diff = init_x - x
    y_diff = init_y - y

    abs(x_diff) <= 2 && abs(y_diff) <= 2
  end
end
```

</details>

Create implementations for the `Character` protocol as documented below.

```elixir
defprotocol Character do
  @doc """

  Determine if a character type can attack based on it's
  current position and target position on a grid.
  ## Examples

    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {6, 6})
    true
    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {2, 2})
    true
    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {2, 6})
    true
    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {6, 2})
    true

    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {1, 1})
    false
    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {7, 7})
    false
    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {7, 1})
    false
    iex> Character.can_attack?(%Barbarian{}, {4, 4}, {1, 7})
    false

    iex> Character.can_attack?(%Barbarian{}, {3, 3}, {5, 5})
    true
    iex> Character.can_attack?(%Barbarian{}, {3, 3}, {6, 6})
    false

    iex> Character.can_attack?(%Wizard{}, {4, 4}, {7, 7})
    true
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {1, 1})
    true
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {1, 7})
    true
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {7, 1})
    true

    iex> Character.can_attack?(%Wizard{}, {3, 3}, {4, 4})
    true
    iex> Character.can_attack?(%Wizard{}, {3, 3}, {4, 2})
    true

    iex> Character.can_attack?(%Wizard{}, {4, 4}, {5, 4})
    true
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {4, 5})
    true
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {3, 4})
    true
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {4, 3})
    true

    iex> Character.can_attack?(%Wizard{}, {4, 4}, {6, 5})
    false
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {2, 5})
    false
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {3, 2})
    false
    iex> Character.can_attack?(%Wizard{}, {4, 4}, {6, 3})
    false
  """
  def can_attack?(character, origin, target)
end
```

## Custom Character (BONUS)

Create your own customer character with an attack pattern than you decide on. It should not
match the existing characters.

For example, you might create an `Archer` who can only attack in a 3 radius square.

![](images/archer_attack.png)

<!-- livebook:{"force_markdown":true} -->

```elixir
Character.can_attack?(%Archer{}, {4, 4}, {7, 7})
true
```

Implement your custom character below.

```elixir

```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-battle_map
$ git add .
$ git commit -m "finish battle map exercise"
$ git push origin exercise-battle_map
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                       | Next                                     |
| -------------------------------------------------------------- | ---------------------------------------: |
| [Consumable Protocol](../exercises/consumable_protocol.livemd) | [Recursion](../reading/recursion.livemd) |
