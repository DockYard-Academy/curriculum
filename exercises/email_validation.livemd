# Email Validation

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Email Validation

Most applications and websites with users have a sign up form with an email input.

Generally, we validate this input to ensure that users enter a valid email.

You are going to build an `Email.validate/1` function which checks if an email address is valid or not.

<!-- livebook:{"force_markdown":true} -->

```elixir
Email.valid?("mail@mail.com")
true

Email.valid?("mail.com")
false
```

For the sake of this exercise, an email is valid if it is in the format `string@string.string`. Be aware, this is not sufficient for true email validation where not all characters are allowed.

<details style="background-color: burlywood; padding: 1rem; margin: 1rem 0;">
<summary>Hint</summary>

Consider using [Regex.match/2](https://hexdocs.pm/elixir/Regex.html#match/2).

</details>

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Email do
  def valid?(email) do
    Regex.match?(~r/\w+\@\w+\.\w+/, email)
  end
end
```

</details>

Implement the `Email` module as documented.

```elixir
defmodule Email do
  @moduledoc """
  Documentation for `Email`
  """

  @doc """
  Checks if an email is valid.

  ## Examples

    iex> Email.valid?("mail@mail.com")
    true

    iex> Email.valid?("string@string.string")
    true

    iex> Email.valid?("string")
    false

    iex> Email.valid?(".string")
    false

    iex> Email.valid?("string.string")
    false

    iex> Email.valid?("string@string")
    false

    iex> Email.valid?("string@string.")
    false
  """
  def valid?(email) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-email_validation
$ git add .
$ git commit -m "finish email validation exercise"
$ git push origin exercise-email_validation
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                         | Next                                               |
| -------------------------------- | -------------------------------------------------: |
| [Regex](../reading/regex.livemd) | [Caesar Cypher](../exercises/caesar_cypher.livemd) |
