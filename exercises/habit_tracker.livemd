# Habit Tracker

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "#{__DIR__}/../utils"},
  {:tested_cell, git: "https://github.com/BrooklinJazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Habit Tracker

We are building a habit tracking app.

Each task has been assigned a different point value. Users earn points based on the tasks they complete and track progress on daily goals.

```mermaid
flowchart
  A["Large (30 points)"]
  B["Medium (20 points)"]
  C["Small (5 points)"]
```

### Define Tasks

Bind a variable `small`, `medium`, and `large` to represent the point value as an integer (see above) for each task.

Replace `nil` with your answers.

<!-- livebook:{"attrs":{"assertions":"assert small == 5\nassert medium == 20\nassert large == 30","code":"small = nil\r\nmedium = nil\r\nlarge = nil","solution":"small = 5\nmedium = 20\nlarge = 30"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    small = nil
    medium = nil
    large = nil
    assert small == 5
    assert medium == 20
    assert large == 30
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
small = nil
medium = nil
large = nil
```

### Add Tasks

Given a user has completed a small and medium task, how many points do the have?

Use the `small` and `medium` variables to calculate your answer.

Replace `nil` with your answer below.

<!-- livebook:{"attrs":{"assertions":"assert total_points == 20 + 5","code":"total_points = nil","solution":"total_points = small + medium"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    total_points = nil
    assert total_points == 20 + 5
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
total_points = nil
```

### Point Goal Percentages

Users define a number of points they would like to earn each day.

What percentage progress have they made if they would like to earn `40` points and have
completed a `small` and a `medium` task?

Remember that you can calculate percentage with $\frac{points}{point\ goal} * 100$

Replace `nil` with your answer below.

<!-- livebook:{"attrs":{"assertions":"assert percentage == (5 + 20) / 40 * 100","code":"point_goal = 40\r\n\r\npercentage = nil","solution":"percentage = (small + medium) / point_goal * 100"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    point_goal = 40

    percentage = nil
    assert percentage == (5 + 20) / 40 * 100
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
point_goal = 40

percentage = nil
```

### New Feature Added - Penalties

A new feature is added. Users now must complete tasks within a time limit or receive a penalty.

Late tasks earn `50%` their normal value. So a task worth `10` points is now worth `5` when late.

A user has completed

* a medium task
* a small task
* a late large task

What is their total point score? Replace `nil` with your answer.

<!-- livebook:{"attrs":{"assertions":"assert total_points == 5 + 20 + 30 * 0.5","code":"total_points = nil","solution":"total_points = small + medium + large * 0.5"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    total_points = nil
    assert total_points == 5 + 20 + 30 * 0.5
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
total_points = nil
```

A user has completed

* three late `medium` tasks
* three late `small` tasks.

What is their total point score? Replace `nil` with your answer.

<!-- livebook:{"attrs":{"assertions":"assert total_points == 5 / 2 * 3 + 20 / 2 * 3","code":"total_points = nil","solution":"total_points = small / 2 * 3 + medium / 2 * 3"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    total_points = nil
    assert total_points == 5 / 2 * 3 + 20 / 2 * 3
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
total_points = nil
```

### New Feature Added - Rewards

<!-- livebook:{"break_markdown":true} -->

A new feature is added. Users now must complete tasks within a time limit or receive a penalty.

Early tasks earn an additional `60%` of their normal value. So a task worth `10` points is now worth `16` when early.

A user has completed:

* one early medium task
* one early small
* one late large task

What is their total point score? Replace `nil` with your answer.

<!-- livebook:{"attrs":{"assertions":"assert total_points == 20 * 1.6 + 5 * 1.6 + 30 * 0.5","code":"total_points = nil","solution":"total_points = medium * 1.6 + small * 1.6 + large * 0.5"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    total_points = nil
    assert total_points == 20 * 1.6 + 5 * 1.6 + 30 * 0.5
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
total_points = nil
```

### (BONUS): Add Your Own Feature

Add your own feature to the habit tracking app. Use comments to describe your feature and show
how it would affect calculating the total score and or the total percentage of completed tasks.

```elixir

```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish habit tracker exercise"
```
