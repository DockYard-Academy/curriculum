# Mailbox Server

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Mailbox Server

Earlier you created a [Process Mailbox](./process_mailbox.livemd) using purely processes.
Now you're going to create a similar mailbox using [GenServer](https://hexdocs.pm/elixir/GenServer.html).

To test your solution, you can use [:sys.get_state/1](https://www.erlang.org/doc/man/sys.html#get_state-1) to get the current state of your mailbox. This should **only** be used for debugging purposes, not for retrieving values from state in a real-world application.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, mailbox_pid} = GenServer.start_link(Mailbox, [])

GenServer.cast(mailbox_pid, {:mail, %{title: "Title 1", content: "Content 1"}})
GenServer.cast(mailbox_pid, {:mail, %{title: "Title 2", content: "Content 2"}})

:sys.get_state(mailbox_pid)
[%{title: "Title 2", content: "Content 2"}, %{title: "Title 1", content: "Content 1"}]
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Mailbox do
  use GenServer

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state)
  end

  def send(mailbox_pid) do
    GenServer.call(mailbox_pid, {:mail, mail})
  end

  def all_messages(mailbox_pid) do
    GenServer.call(mailbox_pid, :all_messages)
  end

  @impl true
  def init(state) do
    {:ok, state}
  end

  @impl true
  def handle_call(:all_messages, state) do
    {:noreply, state, state}
  end

  @impl true
  def handle_cast({:mail, mail}, state) do
    {:noreply, [mail | state]}
  end

  def handle_info({:mail, mail}, state) do
    {:noreply, [mail | state]}
  end
end
```

</details>

Implement the `Mailbox` [GenServer](https://hexdocs.pm/elixir/GenServer.html) as documented below.

```elixir
defmodule Mailbox do
  use GenServer

  @doc """
  Start a mailbox server.

  ## Examples

      iex> {:ok, pid} = Mailbox.start_link([])
      iex> :sys.get_state(pid)
      []

      Allow the mailbox to start with a default list of messages.

      iex> {:ok, pid} = Mailbox.start_link(["Welcome to your mailbox!"])
      iex> :sys.get_state(pid)
      ["Welcome to your mailbox!"]
  """
  def start_link(_opts) do
  end

  @doc """
  Asynchronously Send a message to a mailbox server.

  ## Examples

      iex> {:ok, pid} = Mailbox.start_link([])
      iex> Mailbox.send(pid, "Message 1")
      iex> Mailbox.send(pid, "Message 2")
      iex> :sys.get_state(pid)
      ["Message 2", "Message 1"]
  """
  def send(mailbox_pid) do
  end

  @doc """
  Synchonously retrieve all messages in a mailbox server.

  ## Examples

      iex> {:ok, pid} = Mailbox.start_link([])
      iex> Mailbox.all_messages(pid)
      []
  """
  def all_messages(mailbox_pid) do
  end

  @doc """
  Required callback to start a GenServer.

  ## Examples

      iex> {:ok, pid} = GenServer.start_link(Mailbox, [])
  """
  @impl true
  def init(state) do
  end

  @doc """
  Callback to synchronously retrieve a `Mailbox`'s state.

  ## Examples

      iex> {:ok, pid} = GenServer.start_link(Mailbox, ["Welcome"])
      iex> GenServer.call(pid, :all_messages)
      ["Welcome"]
  """
  @impl true
  def handle_call(:all_messages, state) do
  end

  @doc """
  Callback for receiving a `cast` message and storing it in the `Mailbox`'s state.

  ## Examples

      iex> {:ok, pid} = GenServer.start_link(Mailbox, [])
      iex> GenServer.cast(pid, {:mail, "Message 1"})
      iex> GenServer.cast(pid, {:mail, "Message 2"})
      iex> :sys.get_state(pid)
      ["Message 2", "Message 1"]
  """
  @impl true
  def handle_cast({:mail, mail}, state) do
  end

  @doc """
  Callback for receiving "regular" messages and storing them in the `Mailbox`'s state.

  ## Examples

      iex> {:ok, pid} = GenServer.start_link(Mailbox, [])
      iex> Process.send(pid, {:mail, "Message 1"}, [])
      iex> Process.send(pid, {:mail, "Message 2"}, [])
      iex> :sys.get_state(pid)
      ["Message 2", "Message 1"]
  """
  def handle_info({:mail, mail}, state) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-mailbox_server
$ git add .
$ git commit -m "finish mailbox server exercise"
$ git push origin exercise-mailbox_server
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                           | Next                                               |
| -------------------------------------------------- | -------------------------------------------------: |
| [Async Messages](../reading/async_messages.livemd) | [Score Tracker](../exercises/score_tracker.livemd) |
