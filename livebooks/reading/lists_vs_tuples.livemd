# Lists Vs Tuples

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists Vs Tuples">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/picchat_emails.livemd">PicChat: Emails</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/maps_mapsets_keyword_lists.livemd">Maps, Mapsets, And Keyword Lists</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Review Questions

Upon completing this lesson, a student should be able to answer the following questions.

* How are lists stored under the hood, and how does this impact their performance for reading vs updating?
* How are tuples stored under the hood and how does this impact their performance for reading vs writing?
* When should you use a list vs a tuple?

## Overview

Lists and Tuples are intended for fundamentally different use cases.

Lists are dynamic-sized containers meant to be optimized for updating elements within the list, while Tuples
are fixed-sized containers optimized for reading values.

In this lesson, we'll go over how Lists and Tuples are implemented in Elixir so that you can
understand their strengths and weaknesses in order to use them more effectively.

We will use the following large list and large tuple to perform several benchmarks.

```elixir
large_list = Enum.to_list(1..10_000_000)
large_tuple = List.to_tuple(large_list)
```

## Lists

Lists are stored in memory as **linked lists**. That means that each element in the list
is actually stored in pairs of two. The first element of the pair is the value, the second
element of the pair is the location of the next element.

For example, let's take the list `[2, 3]`.

Notice below, that each element in the list is stored as a pair in the **heap**. The first
element of the pair is the value, and the second element of the pair is the location of the next
element.

![](images/linked_list_cons_cells.png)

In fact, `[2, 3]` can also be written as pairs like so `[2 | [3 | []]]`, where each cell is written
as `[head | tail]`. The head is the value, and the tail is the reference to the rest of the list.
You may sometimes hear these called [`cons` cells](https://en.wikipedia.org/wiki/Cons).

## Tuples

Tuples are stored contiguously in memory. Contiguously means that each element in the tuple
shares a common border.

For example, the tuple `{1, 2, 3}` could be stored like so.
![](images/tuple_storage_contiguously.png)

## Lists Vs Tuples

Lists and tuples serve different purposes. Due to their structure they are more or less performant
for certain operations.

We'll use the built-in Erlang library's `:timer.tc/1` function to compare the amount of time in microseconds
that it takes to perform common operations on a large set of data.

```elixir
:timer.tc(fn ->
  _expensive_computation = 10000 ** 10000
  "return value of the function"
end)
```

Simultaneous operations in your computer compete for resources, and our measurement tools are not
perfect, so you may notice that execution time is not always consistent.

## Length

Tuples are fixed-size containers, so their length is known upfront. It's a constant $O(1)$
time to determine the size of a tuple no matter how large.

For lists, we only know the location of the first element. So, we need to traverse the entire
list to find its length.
That means it takes $O(n)$ time where $n$ is the number of elements in the list.

Let's compare the time it takes to determine the length of an equal-sized list and tuple.
We can use `tuple_size` to count the length of a tuple, and `length` to determine the length of a list.

```elixir
{tuple_time, _result} = :timer.tc(fn -> tuple_size(large_tuple) end)
{list_time, _result} = :timer.tc(fn -> length(large_list) end)

%{tuple: tuple_time, list: list_time}
```

The exact result will be different each time, however as expected, the tuple is nearly instant and the
list takes far longer.

## Prepending

Prepending in a list is fast, because we only need to create a new pair of elements in memory
and point it to the head of the existing list. Let's prepend `1` to `[2, 3]` as an example.

```elixir
[1 | [2, 3]]
```

![](images/prepend_linked_list_memory.png)

Therefore, prepending an element to a list is $O(1)$ complexity.
This holds true no matter the size of the list, because the work done remains the same.

Tuples however, are stored contiguously in memory, so in order to make any change the entire tuple must
be copied. Since we need to enumerate through the tuple and copy each value, prepending
and element to a tuple is $O(n)$ complexity.

Let's prepend `0` to `{1, 2, 3}` as an example. To prepend a value we can use either [Tuple.insert_at/3](https://hexdocs.pm/elixir/Tuple.html#insert_at/3).

```elixir
Tuple.insert_at({1, 2, 3}, 0, 0)
```

![](images/prepending_tuples.png)

<!-- livebook:{"break_markdown":true} -->

Let's compare the time it takes to prepend an element to an equal sized list and tuple.

```elixir
{tuple_time, _result} = :timer.tc(fn -> Tuple.insert_at(large_tuple, 0, 0) end)
{list_time, _result} = :timer.tc(fn -> List.insert_at(large_list, 0, 0) end)

%{tuple: tuple_time, list: list_time}
```

Once again, as expected prepending the list is nearly instant, where as prepending a tuple takes some time.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

In the Elixir cell below, use the `:timer.tc/1` function to time how long it takes to prepend a value to a **list** with `50000` elements.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

We can prepend a list using `[head | tail]` syntax

```elixir
list = Enum.to_list(1..50000)
:timer.tc(fn -> ["my value" | list] end)
```

Alternatively we can use [List.insert_at/3](https://hexdocs.pm/elixir/List.html#insert_at/3).

```elixir
list = Enum.to_list(1..50000)
:timer.tc(fn -> List.insert_at(list, 0, "my value") end)
```

Generally, `[head | tail]` is more idiomatic.

</details>

```elixir

```

In the Elixir cell below, use the `:timer.tc/1` function to time how long it takes to prepend a value to a **tuple** with `50000` elements.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
tuple = Enum.to_list(1..50000) |> List.to_tuple()
:timer.tc(fn -> Tuple.insert_at(tuple, 0, 0) end)
```

</details>

```elixir

```

## Accessing

Accessing an element in a tuple is constant $O(1)$ complexity because the size of the tuple
is already known. Accessing an element in a list is $O(n)$ complexity where n is the index of
the element we need to access.

```mermaid
flowchart TB
subgraph Accessing Memory
lu["Lower Bound: O(1), Upper Bound: O(n)"]
direction LR
  subgraph Memory
    L -- location to --> I -- location to --> S -- location to --> T -- location to --> E[...]
  end
  subgraph Time Complexity
  0["O(1)"] --> L
  1["O(2)"] --> I
  2["O(3)"] --> S
  3["O(4)"] --> T
  4["O(n)"] --> E
  end
end

```

<!-- livebook:{"break_markdown":true} -->

That means retrieving the head of any list regardless of its size is constant $O(1)$ complexity, and retrieving
the last element of the list is $O(n)$ complexity.

Let's compare accessing the first element of a tuple and list of equal size.

```elixir
{tuple_time, _result} = :timer.tc(fn -> elem(large_tuple, 0) end)

{list_time, _result} =
  :timer.tc(fn ->
    [head | _tail] = large_list
    head
  end)

%{tuple: tuple_time, list: list_time}
```

As expected, both are very fast. In fact the list is even faster than the tuple. However, this
changes drastically when we try to access the last element in the list and tuple.

```elixir
{tuple_time, _result} = :timer.tc(fn -> elem(large_tuple, 9_999_999) end)

{list_time, _result} = :timer.tc(fn -> Enum.at(large_list, 9_999_999) end)

%{tuple: tuple_time, list: list_time}
```

### Your Turn

In the Elixir cell below, use the `:timer.tc/1` function to time how long it takes
to access the first element, and last element of a list with `5000` elements.

Then do the same for tuples.

```elixir

```

## Concatenation

Concatenating a tuple requires copying both tuples in memory, therefore it's performance cost is
$O(n1 + n2)$ where $n1$ is the number of elements in the first tuple and $n2$ is the number of elements
in the second tuple.

<!-- livebook:{"break_markdown":true} -->

![](images/tuple_concatination.png)

<!-- livebook:{"break_markdown":true} -->

However $O(n1 + n2)$ is only the theoretical performance cost. In reality it's higher because tuples do
not support concatenation, and you would first need to convert them into a list.

Why don't tuples support concatenation? Because they should be used for **fixed-sized containers**. [Jose Valim](https://stackoverflow.com/a/28355536/9021210) explains.

> You can't concatenate tuples.
> The only reason is that you are not supposed to use them as such. Most of tuple usage requires knowing their size and things get blurrier if you can concatenate them. Furthermore, concatenating tuples requires copying both tuples in memory, which is not efficient.
> In other words, if you want to concatenate tuples, you may have the wrong data structure. You have two options:
> 
> * Use lists
> * Compose the tuples: instead of a ++ b, just write {a, b}

However for a list, only the first list must be copied, so it has $O(n1)$ cost where $n1$ is the
number of elements in the first list. The first copied list can now simply point to the head of
the second list in memory.

For example,

```elixir
[1, 2, 3] ++ [4, 5]
```

![](images/concatinate_list.png)

<!-- livebook:{"break_markdown":true} -->

That means that so long as your first list is small, it's a fairly performant operation, even if the second list is massive.
However, it will be expensive if the first list is large.

```elixir
{small_first_list, _result} = :timer.tc(fn -> [1] ++ large_list end)
{large_first_list, _result} = :timer.tc(fn -> large_list ++ [1] end)

%{small_first_list: small_first_list, large_first_list: large_first_list}
```

### Your Turn

In the Elixir cell below, use the `:timer.tc/1` function to time how long it takes
to concatenate a list with one element and a list with 5000 elements.

Then try to concatenate a list with 5000 elements to a list with 1 element. Notice how it takes longer.

```elixir

```

## Updating (Replacing)

In a functional programming language, we do not mutate values in a list or tuple. Instead, we
copy values where necessary.

When updating a list, we copy the elements before the updated element, then reuse the ones after it.

```elixir
list = [1, 2, 3, 4, 5]
List.replace_at(list, 2, 7)
```

![](images/update_linked_list.png)

<!-- livebook:{"break_markdown":true} -->

Similarly to accessing an element,
that means it's constant time complexity $O(1)$ to update an element at the start,
and $O(n)$ complexity to access an element at the end.

Tuples however, must be copied over completely when updated. We can use `put_elem/3` to update
an element in a tuple.

```elixir
tuple = {1, 2, 3, 4, 5}
put_elem(tuple, 2, 7)
```

![](images/update_tuples.png)

<!-- livebook:{"break_markdown":true} -->

Let's compare the time it takes to update the first element of a list and tuple of equal size.

```elixir
{tuple_time, _result} = :timer.tc(fn -> put_elem(large_tuple, 0, 7) end)
{list_time, _result} = :timer.tc(fn -> List.replace_at(large_list, 0, 7) end)

%{tuple: tuple_time, list: list_time}
```

As expected, the list is fast and the tuple is slow. Now let's compare the time it takes to update
the last element of a list and tuple of equal size.

```elixir
{tuple_time, _result} = :timer.tc(fn -> put_elem(large_tuple, 9_999_999, 7) end)
{list_time, _result} = :timer.tc(fn -> List.replace_at(large_list, 9_999_999, 7) end)

%{tuple: tuple_time, list: list_time}
```

The list is far slower now that it needs to look through the entire list, while the tuple is approximately
the same speed as updating the first element.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

In the Elixir cell below, use `:timer.tc/1` to compare updating the **first** element of a list
and tuple with `5000` elements.

```elixir

```

In the Elixir cell below, use `:timer.tc/1` to compare updating the **last** element of a list and tuple
with `5000` elements.

```elixir

```

## Inserting

Inserting in a list follows the same pattern as updating a list. We can reuse elements
after the insertion, but must copy elements before the insertion.

```elixir
list = [1, 2, 3, 4, 5]
List.insert_at(list, 3, 7)
```

![](images/insert_linked_list_memory.png)

<!-- livebook:{"break_markdown":true} -->

Inserting an element in a tuple requires copying the entire tuple.

```elixir
tuple = {1, 2, 3, 4, 5}
Tuple.insert_at(tuple, 3, 7)
```

![](images/inserting_tuples_memory.png)

<!-- livebook:{"break_markdown":true} -->

Based on this knowledge, we expect that inserting in a tuple is always $O(n)$ complexity,
where as inserting in a list will be faster the earlier in the list you insert.

We've already proven earlier that prepending a list has $O(1)$ time complexity, now let's
prove that inserting at the end of both a list and a tuple has $O(n)$ time complexity.

```elixir
{tuple_time, _result} = :timer.tc(fn -> Tuple.insert_at(large_tuple, 10_000_000, 7) end)
{list_time, _result} = :timer.tc(fn -> List.insert_at(large_list, 10_000_000, 7) end)

%{tuple: tuple_time, list: list_time}
```

### Your Turn

In the Elixir cell below, use `:timer.tc` to insert to the end of a large `50000` element list and tuple.

```elixir

```

## Deleting

Deleting an element in a list requires copying elements prior to the deletion, and reusing
elements after the deletion.

```elixir
list = [1, 2, 3, 4, 5]
List.delete_at(list, 3)
```

![](images/delete_list_memory.png)

<!-- livebook:{"break_markdown":true} -->

Deleting a tuple requires copying over every non-deleted element.

![](images/delete_tuple_memory_diagram.png)

<!-- livebook:{"break_markdown":true} -->

Let's prove that deleting any element in the tuple has a similar performance cost, and that deleting the
first element in a list is less expensive than deleting the last.

```elixir
{tuple_time, _result} = :timer.tc(fn -> Tuple.delete_at(large_tuple, 0) end)
{list_time, _result} = :timer.tc(fn -> List.delete_at(large_list, 0) end)

%{tuple: tuple_time, list: list_time}
```

```elixir
{tuple_time, _result} = :timer.tc(fn -> Tuple.delete_at(large_tuple, 9_999_999) end)
{list_time, _result} = :timer.tc(fn -> List.delete_at(large_list, 9_999_999) end)

%{tuple: tuple_time, list: list_time}
```

## Copying

When we modify a tuple, the new version of the tuple will contain an entire copy of the tuple differing only in the modified element.

When you modify the $nth$ element in a list, the new list will contain a copy of the first
$n - 1$ elements, then a modified element, then the tail of the previous list.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
subgraph Operation on nth element in a list
n[copied elements] --> m[modified element] --> t[tail of previous list]
end
```

<!-- livebook:{"break_markdown":true} -->

### Shallow Copying

When we use the term **copy**, it's important to be clear that we mean **shallow copy**.

You likely won't need to concern yourself with this often, but it's useful to be aware of the difference
between **deep copying** and **shallow copy** and the performance implications.

When we shallow copy, we copy the reference to the data, rather than the data itself.

A deep copy, copies the actual underlying data.

In a shallow copy, primitive values such as `1` will simply be copied as `1`. However data types which contain
references will be copied as references.

### Shallow Copying Tuples

Let's take an example with tuples.

```elixir
a = {1, 2, 3}
b = {4, 5, 6}
c = {7, 8, 9}
```

In the code above, `a`, `b`, and `c` exist on the stack and all contain **pointers** to actual memory on the **heap**

```mermaid
flowchart LR
subgraph Stack
a
b
c
end
subgraph Heap
a --pointer--> a1["{1, 2, 3}"]
b --pointer--> b1["{4, 5, 6}"]
c --pointer--> c1["{7, 8, 9}"]
end

```

```elixir
b2 = {11, 12, 13}

a_tuple = {a, b, c}
new_tuple = put_elem(a_tuple, 1, b2)

new_tuple
```

Under the hood, when the computer copies `a_tuple` to create `new_tuple`, it creates a reference
to the original variable on the stack, so they share memory on the heap.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
subgraph Stack
  subgraph a_tuple
    a1[a]
    b1[b]
    c1[c]
  end
  subgraph new_tuple
    a2[a] --reference--> a1
    c2[c] --reference--> c1
    b2
  end
end
subgraph Heap
  a1 --pointer --> a3["{1, 2, 3}"]
  b1 --pointer--> b3["{4, 5, 6}"]
  c1 --pointer--> c4["{7, 8, 9}"]
  b2 --pointer--> c5["{10, 11, 12}"]
end

```

<!-- livebook:{"break_markdown":true} -->

In memory, that might look like the following.

<!-- livebook:{"break_markdown":true} -->

![](images/copying_abc_tuple.png)

## Garbage Collection

Elixir handles garbage collection for us, so we often don't need to concern ourselves with this implementation detail.

Whenever a variable is no longer referenced, it is free to be garbage collected.
For example, if we have the variables `a`, `b`, and `c`, if we rebind `b`, we no longer have to store the underlying data and it will be garbage collected.

```elixir
a = {1, 2, 3}
b = {4, 5, 6}
c = {7, 8, 9}

# {4, 5, 6} Is Now Free To Be Garbage Collected Because It Is No Longer Referenced By Any Variable.
b = {10, 11, 12}
```

This frees up the tuple `{4, 5, 6}` for garbage collection, because it is no longer accessible.
Below we use `b` and `b2` to represent rebinding the `b` variable.

<!-- livebook:{"break_markdown":true} -->

![](images/abc_tuple_garbage_collection.png)

## Conclusion

Operations with tuples and lists will have the following Big $O$ notation.

<!-- livebook:{"attrs":{"source":"[\n  [operation: \"length\", tuple: \"O(1)\", list: \"O(n)\"],\n  [operation: \"prepend\", tuple: \"O(n)\", list: \"O(1)\"],\n  [operation: \"insert\", tuple: \"O(n)\", list: \"O(n*)\"],\n  [operation: \"access\", tuple: \"O(1)\", list: \"O(n*)\"],\n  [operation: \"update/replace\", tuple: \"O(n)\", list: \"O(n*)\"],\n  [operation: \"delete\", tuple: \"O(n)\", list: \"O(n*)\"],\n  [operation: \"concatenation\", tuple: \"O(n1 + n2)\", list: \"O(n1)\"]\n]\n|> Kino.DataTable.new()","title":"Lists and Tuples"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
[
  [operation: "length", tuple: "O(1)", list: "O(n)"],
  [operation: "prepend", tuple: "O(n)", list: "O(1)"],
  [operation: "insert", tuple: "O(n)", list: "O(n*)"],
  [operation: "access", tuple: "O(1)", list: "O(n*)"],
  [operation: "update/replace", tuple: "O(n)", list: "O(n*)"],
  [operation: "delete", tuple: "O(n)", list: "O(n*)"],
  [operation: "concatenation", tuple: "O(n1 + n2)", list: "O(n1)"]
]
|> Kino.DataTable.new()
```

> n* will be the index of the operation, instead of the number of elements in the list.

<!-- livebook:{"break_markdown":true} -->

### Key Takeaways

* Tuples are $O(1)$ for reading a value and the length, but require $O(n)$ for all other operations.
* List operations are generally $O(n)$ complexity where $n$ is the index of the operation, meaning operations
  early in a list can be very performant and are preferred when possible.
* Tuples should be used for **fixed-size containers**.
* Lists should be used for **dynamic-size containers**.
* Functional languages do not allow mutation, they instead rely on **shallow-copying** elements
  to avoid unnecessary memory consumption.

## Further Reading

Consider the following resource(s) to deepen your understanding of the topic.

* [Elixirlang: Tuples or Lists?](https://elixir-lang.org/getting-started/basic-types.html#lists-or-tuples)
* [Exercism: Tuples](https://exercism.org/tracks/elixir/concepts/tuples)
* [Exercism: Lists](https://exercism.org/tracks/elixir/concepts/lists)

## Commit Your Progress

DockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.

Run `git status` to ensure there are no undesirable changes.
Then run the following in your command line from the `curriculum` folder to commit your progress.

```
$ git add .
$ git commit -m "finish Lists Vs Tuples reading"
$ git push
```

We're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.

We also offer a paid course where you can learn from an instructor alongside a cohort of your peers.
We will accept applications for the June-August 2023 cohort soon.

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Lists Vs Tuples">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../reading/picchat_emails.livemd">PicChat: Emails</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/maps_mapsets_keyword_lists.livemd">Maps, Mapsets, And Keyword Lists</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
