# Mazes

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Overview

In this exercise, you're going to navigate a maze game.

Each maze is a deeply nested `map`.

If you navigate successfully, your answer will return `"Exit!"`

## The Atom Maze

We've created a map that represents the following maze. Each cardinal direction (north, south, west, east) necessary to navigate the maze is stored as a key in the map.

<!-- livebook:{"break_markdown":true} -->

![](images/atom_key_maze.png)

```elixir
maze = %{
  south: %{
    west: %{
      south: %{
        east: %{
          south: %{
            east: %{
              south: "Exit!"
            }
          }
        }
      }
    }
  }
}
```

Use **map.key** notation to navigate the maze and retrieve the `"Exit!"` string.

<!-- livebook:{"break_markdown":true} -->

In the Elixir cell below, use **map.key** notation to navigate the following maze. The maze is
in an `atom_maze` variable.

<!-- livebook:{"break_markdown":true} -->

Replace `nil` with your answer.

```elixir
atom_maze = %{
  south: %{
    west: %{
      south: %{
        east: %{
          south: %{
            east: %{
              south: "Exit!"
            }
          }
        }
      }
    }
  }
}

path = nil
```

## The String Maze

In the Elixir cell below, use **map[key]** notation to get to the end of the following maze.
The maze is in a `string_maze` variable. Replace `nil` with your answer.

<!-- livebook:{"break_markdown":true} -->

![](images/string_maze_small.png)

```elixir
string_maze = %{
  "south" => %{
    "east" => %{
      "south" => %{
        "west" => %{
          "south" => %{
            "west" => %{
              "south" => %{
                "east" => %{
                  # using string_maze[key] syntax, access this deeply nested value.
                  "south" => "Exit!"
                }
              }
            }
          }
        }
      }
    }
  }
}

path = nil

Utils.feedback(:string_maze, [string_maze, path])
```

## Create Your Own Maze

Generate a maze using the [Online Maze Generator](https://www.mazegenerator.net/). It should be
at least a 5 * 5 in width and height.

* Create a deeply nested map to represent your `custom_maze`. It should have an `"Exit!"` value at the end.
* Use either **map[key]** notation
  or **map.key** notation to show how to navigate your maze `path`.
* BONUS: Use both atom keys and string keys in your `custom_maze`.

Replace `nil` with your answers below.

```elixir
custom_maze = nil

path = nil

Utils.feedback(:custom_maze, [custom_maze, nil])
```

## Treasure Map

You have been given a treasure map (pun intended). That will lead you to `"gold"`.

Use **map[key]** and/or **map.key** to access the `"gold"` value in the `treasure_map`.

Here's a simple example of how to take the gold:

<!-- livebook:{"force_markdown":true} -->

```elixir
treasure_map = %{
  "ten paces south" => %{
    10 => "gold"
  }
}

path = treasure_map["ten paces south"][10]
```

<!-- livebook:{"break_markdown":true} -->

Replace `nil` with your answer below.

```elixir
treasure_map = %{
  "south ten paces" => %{
    10 => %{
      :"east three paces" => %{
        [1, 2, 3] => %{
          {"turn", "right"} => %{
            :dig => "gold"
          }
        }
      }
    }
  }
}

path = nil

Utils.feedback(:treasure_map, [treasure_map, path])
```

### (Bonus) Update the Treasure Map

Use map update syntax `%{map | key => "new value"}` or `%{map | key: "new value"}` and update the `treasure_map`
to show the `"gold"` has been `"taken"`.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
treasure_map = %{
  "ten paces south" => %{
    10 => "gold"
  }
}

updated_map = %{treasure_map | "ten paces south" => %{10 => "taken"}}
```

<!-- livebook:{"break_markdown":true} -->

Replace `nil` with your answer below.

```elixir
treasure_map = %{
  "south ten paces" => %{
    10 => %{
      :"east three paces" => %{
        [1, 2, 3] => %{
          {"turn", "right"} => %{
            :dig => "gold"
          }
        }
      }
    }
  }
}

updated_map = %{}

Utils.feedback(:update_treasure_map, [treasure_map, updated_map])
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish mazes exercise"
```

## Up Next

| Previous                                       | Next                                     |
| ---------------------------------------------- | ---------------------------------------: |
| [Family Tree](../exercises/family_tree.livemd) | [Functions](../reading/functions.livemd) |
