# Boolean Operators

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "#{__DIR__}/../utils"},
  {:tested_cell, git: "https://github.com/BrooklinJazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Boolean Diagrams

In each Elixir cell or text input enter the **boolean** or **boolean operator** for the blank that would satisfy the diagram.
Replace `nil` with your answer.

```mermaid
flowchart LR
a[true] --> and
b[____] --> and
and --> false
```

<!-- livebook:{"attrs":{"assertions":"assert answer == false","code":"answer = nil","solution":"answer = false"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    answer = nil
    assert answer == false
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
answer = nil
```

```mermaid
flowchart LR
a[false] --> or
b[____] --> or
or --> true
```

<!-- livebook:{"attrs":{"assertions":"assert answer == true","code":"answer = nil","solution":"answer = true"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    answer = nil
    assert answer == true
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
answer = nil
```

Each blank in the following diagram must be the same value. Either `false` or `true`.

```mermaid
flowchart LR
a[false] --> c[or]
b[____] --> c
c --> d[false]
d --> f[or]
e[____] --> f
not --> e
f --> true
```

<!-- livebook:{"attrs":{"assertions":"assert answer == false","code":"answer = nil","solution":"answer = false"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    answer = nil
    assert answer == false
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
answer = nil
```

```mermaid
flowchart LR
  a[true] --> c[and]
  not --> b
  b[____] --> c
  c --> true
```

<!-- livebook:{"attrs":{"assertions":"assert answer == false","code":"answer = nil","solution":"answer = false"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    answer = nil
    assert answer == false
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
answer = nil
```

```mermaid
flowchart LR
  a[true]
  b[____]
  c[and]
  d[true]
  a --> c
  b --> c
  c --> d
```

<!-- livebook:{"attrs":{"assertions":"assert answer == true","code":"answer = nil","solution":"answer = true"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    answer = nil
    assert answer == true
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
answer = nil
```

```mermaid
flowchart LR
  a[false]
  b[____]
  c[or]
  d[false]
  not --> b
  a --> c
  b --> c
  c --> d
```

<!-- livebook:{"attrs":{"assertions":"assert answer == true","code":"answer = nil","solution":"answer = true"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    answer = nil
    assert answer == true
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
answer = nil
```

## Boolean Diagram Forms

Satisfy the diagram by entering the correct boolean operator `and`, `or`, or `not`.

Prefer `and` if both `and` and `or` would satisfy the diagram.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
a[true]
b[true]
c[____]
d[true]
a --> c
b --> c
c --> d
not --> b
```

```elixir
Utils.form(:boolean_diagram1)
```

```mermaid
flowchart LR
a[true]
b[true]
c[____]
d[false]
a --> c
b --> c
c --> d
not --> b
```

```elixir
Utils.form(:boolean_diagram2)
```

```mermaid
flowchart LR
  a[true]
  b[true]
  c[and]
  d[false]
  a --> c
  b --> c
  c --> d
  e[____] --> b
```

```elixir
Utils.form(:boolean_diagram3)
```

## Fill In The Blank

Evaluate the Elixir cell below. In the text inputs, enter the **boolean** or **boolean operator** that satisfies the blank.
If `and` and `or` both satisfy the blank, then prefer `and`.

```elixir
Utils.form(:boolean_fill_in_the_blank)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish boolean operators exercise"
```
