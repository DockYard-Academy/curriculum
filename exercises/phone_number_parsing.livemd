# Phone Number Parsing

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Phone Number Parsing

You have been provided a large string of phone numbers. The problem is, each phone number does
not follow a standard format.

You have been asked to convert them from the non standardized format into a standard format.

Phone numbers will be given in the following formats:

* `1231231234`
* `123 123 1234`
* `(123)-123-1234`
* `(123) 123 1234`
* `(123)123-1234`

You need to convert them into the format `123-123-1234`.

<!-- livebook:{"force_markdown":true} -->

```elixir
text = """
1231231234
123 123 1234
(123)-123-1234
(123) 123 1234
(123)123-1234
"""
PhoneNumber.parse(text)
"""
123-123-1234
123-123-1234
123-123-1234
123-123-1234
123-123-1234
"""
```

<details style="background-color: burlywood; padding: 1rem; margin: 1rem 0;">
<summary>Hint</summary>

Consider using regular expressions with digits and capture groups to replace
phone number expressions in the string.

You can replace expressions one at a time, rather than all at once.

</details>

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule PhoneNumber
  def parse(string) do
    replacement = "\\1-\\2-\\3"

    string
    |> String.replace(~r/(\d{3})(\d{3})(\d{4})/, replacement)
    |> String.replace(~r/(\d{3}) (\d{3}) (\d{4})/, replacement)
    |> String.replace(~r/\((\d{3})\)-(\d{3})-(\d{4})/, replacement)
    |> String.replace(~r/\((\d{3})\) (\d{3}) (\d{4})/, replacement)
    |> String.replace(~r/\((\d{3})\)(\d{3})-(\d{4})/, replacement)
  end
end
```

</details>

Implement the `PhoneNumber` module as documented below.

```elixir
defmodule PhoneNumber do
  @moduledoc """
  Documentation for `PhoneNumber`
  """

  @doc """
  Parse phone numbers and convert them to XXX-XXX-XXXX format.

  ## Examples

    iex> PhoneNumber.parse("1231231234")
    "123-123-1234"

    iex> PhoneNumber.parse("123 123 1234")
    "123-123-1234"

    iex> PhoneNumber.parse("(123)-123-1234")
    "123-123-1234"

    iex> PhoneNumber.parse("(123) 123 1234")
    "123-123-1234"

    iex> PhoneNumber.parse("(123)123-1234")
    "123-123-1234"

    iex> PhoneNumber.parse("1231231234 4564564567")
    "123-123-1234 456-456-4567"
  """
  def parse(string) do
    Regex.replace(~r/\D*(\d{3})\D*(\d{3})\D*(\d{4})(\s?)/, string, fn _full, a, b, c, space ->
      "#{a}-#{b}-#{c}#{space}"
    end)
  end
end
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"phone_number_parsing_reading\"\n    \"exercises\" -> \"phone_number_parsing_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "phone_number_parsing_reading"
    "exercises" -> "phone_number_parsing_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b phone-number-parsing-exercise
$ git add .
$ git commit -m "finish phone number parsing exercise"
$ git push origin phone-number-parsing-exercise
```

Create a pull request from your `phone-number-parsing-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                         | Next                         |
| ---------------------------------------------------------------- | ---------------------------: |
| [Rollable Expressions](../exercises/rollable_expressions.livemd) | [Mix](../reading/mix.livemd) |
