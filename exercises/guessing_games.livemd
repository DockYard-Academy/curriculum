# Guessing Games

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Guess the Word

Create a word guessing game. Manually bind a `guess` and an `answer`. Return `"Correct"` if the guess is equal to the answer, and otherwise return `"Incorrect."`

Ensure your solutions works for both an incorrect and correct player guess.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Example Solution</summary>

  ```elixir
  guess = "hello"
  answer = "hello"

  guess == answer && "Correct!" || "Incorrect."
  ```

</details>

Enter your solution below.

```elixir
answer = "banana"
guess = "banana"

if guess == answer do
  "Correct"
else
  "Incorrect"
end
```

## Bonus: Guess the Random Word

We can use [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1) to pick a random value from a list.

```elixir
Enum.random(["hello", "hi", "howdy"])
```

Armed with this knowledge, you're going to create a word guessing game.

* Bind a variable `guess` to the player's guess as a string.
* Bind a variable `answer` to a random word (you may create a list of random words to choose from)
* If the `guess` matches the answer, return `"Correct!"`, otherwise return `"Incorrect."`.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Example Solution</summary>

  ```elixir
  guess = "hello"
  answer = Enum.random(["hello", "hi", "howdy"])

  guess == answer && "Correct!" || "Incorrect."
  ```

</details>

Enter your solution below.

```elixir
answer = "salt"
guess = Enum.random(["salt", "pepper", "oregano", "paprika"])

(guess == answer && "Correct!") || "Incorrect."
```

## Bonus: Guess the Number

We can generate a random integer between two values by providing a range to [Enum.random/1](https://hexdocs.pm/elixir/Enum.html#random/1).

```elixir
Enum.random(1..10)
```

Now let's build a number guessing game

* Bind a variable `answer` to a random integer between `1` and `10`.
* Bind a variable `guess` to the player's guess.
* If the `guess` equals `answer`, return `"Correct!"`.
* If the `guess` is lower than the answer, return `"Too low!"`.
* If the `guess` is higher than the answer, return `"Too high!"`.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Example Solution</summary>


  `cond` allows us to handle several different conditions.

  ```elixir
  guess = Enum.random(1..10)
  answer = 7

  cond do
    guess == answer -> "Correct!"
    guess < answer -> "Too low!"
    guess > answer -> "Too high!"
  end
  ```

  However, we can also solve this problem using purely boolean operators.

  ```elixir
  guess = Enum.random(1..10)
  answer = 7

  guess == answer && "Correct" || guess < answer && "Too low!" || guess > answer && "Too high!"
  ```

  We can optionally simplify the solution by omitting the last condition. However, this could lead to unhandled bugs.

</details>

Enter your solution below.

```elixir
answer = 3
guess = Enum.random(1..10)

cond do
  guess < answer -> "Too low!"
  guess > answer -> "Too high!"
  guess == answer -> "Correct!"
end
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"guessing_games_reading\"\n    \"exercises\" -> \"guessing_games_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "guessing_games_reading"
    "exercises" -> "guessing_games_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b guessing-games-exercise
$ git add .
$ git commit -m "finish guessing games exercise"
$ git push origin guessing-games-exercise
```

Create a pull request from your `guessing-games-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                 | Next                             |
| ---------------------------------------- | -------------------------------: |
| [Mad Libs](../exercises/mad_libs.livemd) | [Atoms](../reading/atoms.livemd) |
