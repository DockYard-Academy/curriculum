# Timer

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.9", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timer">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/score_tracker.livemd">Score Tracker</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/supervisors.livemd">Supervisors</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

## Timer

You're going to create a `Timer` [GenServer](https://hexdocs.pm/elixir/GenServer.html) which when spawned, will send itself a message every second to increment an internal count.

You should be able to retrieve the number of seconds that have passed since the `Timer` was spawned using a `Timer.seconds/1` function.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = Timer.start_link([])
Timer.seconds(pid)
0
Process.sleep(1000)
Timer.seconds(pid)
2
```

Keep in mind, we cannot guarantee perfect timing when sending messages on an interval, and that is not the purpose of this exercise.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Timer do
  use GenServer

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  def seconds(timer_pid) do
    GenServer.call(timer_pid, :seconds)
  end

  @impl true
  def init(_opts) do
    schedule_timer()
    {:ok, 0}
  end

  @impl true
  def handle_info(:increment, state) do
    schedule_timer()
    {:noreply, state + 1}
  end

  @impl true
  def handle_call(:seconds, _from, state) do
    {:reply, state, state}
  end

  defp schedule_timer do
    Process.send_after(self(), :increment, 1000)
  end
end
```

</details>

Implement the `Timer` module as documented below. You will also have to implement the necessary [GenServer](https://hexdocs.pm/elixir/GenServer.html) callback functions such as [GenServer.init/1](https://hexdocs.pm/elixir/GenServer.html#init/1), [GenServer.handle_info/2](https://hexdocs.pm/elixir/GenServer.html#handle_info/2), and [GenServer.handle_call/3](https://hexdocs.pm/elixir/GenServer.html#handle_call/3).

```elixir
defmodule Timer do
  @moduledoc """
  Documentation for `Timer`
  """
  use GenServer

  @doc """
  Start the `Timer` process.

  ## Examples

      iex> {:ok, _pid} = Timer.start_link([])
  """
  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  @doc """
  Get the number of seconds that have elapsed since the `Timer` was started.

  ## Examples

    iex> {:ok, pid} = Timer.start_link([])
    iex> Timer.seconds(pid)
    0
    iex> Process.sleep(1200)
    iex> Timer.seconds(pid)
    1
  """
  def seconds(timer_pid) do
    GenServer.call(timer_pid, :seconds)
  end

  defp do_increment() do
    Process.send_after(self(), :increment, 1000)
  end

  # Server callback functions

  @impl true
  def init(_opts) do
    do_increment()
    {:ok, 0}
  end

  @impl true
  def handle_call(:seconds, _from, state) do
    {:reply, state, state}
  end

  @impl true
  def handle_info(:increment, state) do
    do_increment()
    {:noreply, state + 1}
  end
end
```

## Bonus :timer

Re-implement your `Timer` module using the erlang [:timer](https://www.erlang.org/doc/man/timer.html) library. If already wrote your solution using the [:timer](https://www.erlang.org/doc/man/timer.html) library, then re-implement it using [Process.send_after/4](https://hexdocs.pm/elixir/Process.html#send_after/4).

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule AlternateTimer do
  use GenServer

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  def seconds(timer_pid) do
    GenServer.call(timer_pid, :seconds)
  end

  @impl true
  def init(_opts) do
    :timer.send_interval(1000, self(), :increment)
    {:ok, 0}
  end

  @impl true
  def handle_call(:seconds, _from, state) do
    {:reply, state, state}
  end

  @impl true
  def handle_info(:increment, state) do
    {:noreply, state + 1}
  end
end
```

</details>

```elixir
defmodule AlternateTimer do
  @moduledoc """
  Documentation for `Timer`
  """
  use GenServer

  @doc """
  Start the `Timer` process.
  """
  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  @doc """
  Get the number of seconds that have elapsed since the `Timer` was started.
  """
  def seconds(timer_pid) do
    GenServer.call(timer_pid, :seconds)
  end

  @impl true
  def init(_opts) do
    :timer.send_interval(1000, self(), :increment)
    {:ok, 0}
  end

  @impl true
  def handle_call(:seconds, _from, state) do
    {:reply, state, state}
  end

  @impl true
  def handle_info(:increment, state) do
    {:noreply, state + 1}
  end
end
```

## Commit Your Progress

DockYard Academy now recommends you use the latest [Release](https://github.com/DockYard-Academy/curriculum/releases) rather than forking or cloning our repository.

Run `git status` to ensure there are no undesirable changes.
Then run the following in your command line from the `curriculum` folder to commit your progress.

```
$ git add .
$ git commit -m "finish Timer exercise"
$ git push
```

We're proud to offer our open-source curriculum free of charge for anyone to learn from at their own pace.

We also offer a paid course where you can learn from an instructor alongside a cohort of your peers.
We will accept applications for the June-August 2023 cohort soon.

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex;">
<i class="ri-home-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../start.livemd">Home</a>
</div>
<div style="display: flex;">
<i class="ri-bug-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=Timer">Report An Issue</a>
</div>
<div style="display: flex;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="../exercises/score_tracker.livemd">Score Tracker</a>
</div>
<div style="display: flex;">
<a style="display: flex; color: #61758a; margin-right: 1rem;" href="../reading/supervisors.livemd">Supervisors</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
