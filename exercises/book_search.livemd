# Book Search

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Book Search

You are building an application for searching books.

Represent each book as a `Book` struct with `title` key. Then create a `Book.search/2` function to filter a list of Book structs by their title as documented in the `Book` module below.

```elixir
defmodule Book do
  @moduledoc """
  Documentation for `Book`.

  ## Examples

    iex> %Book{title: "My Book Title"}
    %Book{title: "My Book Title"}
  """

  defstruct [:title]

  @doc """
  Search a list of Book structs. Search should match any book that includes the
  filter in their title.

  ## Examples

  Include books that exactly match the search query.

    iex> book1 = %Book{title: "A"}
    iex> book2 = %Book{title: "B"}
    iex> book3 = %Book{title: "C"}
    iex> Book.search([book1, book2, book3], "A")
    [%Book{title: "A"}]

  Include books that partially match the search query.

    iex> Book.search([%Book{title: "ABC"}], "A")
    [%Book{title: "ABC"}]

    iex> Book.search([%Book{title: "BAC"}], "A")
    [%Book{title: "BAC"}]

  Search should be case insensitive.

    iex> Book.search([%Book{title: "ABC"}], "a")
    [%Book{title: "ABC"}]
  """
  def search(books, query) do
    books
    |> Enum.filter(fn book ->
      String.contains?(
        String.downcase(book.title),
        String.downcase(query)
      )
    end)
  end
end
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"book_search_reading\"\n    \"exercises\" -> \"book_search_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "book_search_reading"
    "exercises" -> "book_search_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b book-search-exercise
$ git add .
$ git commit -m "finish book search exercise"
$ git push origin book-search-exercise
```

Create a pull request from your `book-search-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                 | Next                                                   |
| -------------------------------------------------------- | -----------------------------------------------------: |
| [Animal Generator](../exercises/animal_generator.livemd) | [Built-In Modules](../reading/built-in_modules.livemd) |
