# Lazy Product Filters

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:benchee, "~> 1.1"},
  {:faker, "~> 0.17.0"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Lazy Product Filters

Previously in the [Product Filters](./product_filters.livemd) exercise, you built an application where users search for products based on certain filters.

Each product is a map with a `:name`, `:category`, and `:price` (in cents).

<!-- livebook:{"force_markdown":true} -->

```elixir
products = [
  %{name: "Laptop", category: :tech, price: 100000},
  %{name: "Phone", category: :tech, price: 50000},
  %{name: "Chocolate", category: :snacks, price: 200},
  %{name: "Shampoo", category: :health, price: 1000}
]
```

You're going to refactor and re-implement your existing `Products.filter/2` function using Streams.

Ensure the refactored version passes your existing test suite.
You should be able to filter by:

1. a partial case-insensitive `:name` field.
2. an inclusive `:min` and `:max` price.
3. an exact `:category` field as an atom.

<!-- livebook:{"break_markdown":true} -->

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Test Cases</summary>

```elixir
ExUnit.start(auto_run: false)

defmodule StreamProductsTest do
  use ExUnit.Case

  test "filter/2 empty filters" do
    found = create_product(name: "Laptop")
    assert StreamProducts.filter([found], []) == [found]
  end

  test "filter/2 by exact matching name" do
    found = create_product(name: "Laptop")
    not_found = create_product(name: "Shampoo")
    products = [found, not_found]
    assert StreamProducts.filter(products, name: "Laptop") == [found]
  end

  test "filter/2 by partial matching name" do
    found = create_product(name: "Laptop")
    not_found = create_product(name: "Shampoo")
    products = [found, not_found]
    assert StreamProducts.filter(products, name: "apt") == [found]
  end

  test "filter/2 by mixed case partial matching name" do
    found = create_product(name: "Laptop")
    not_found = create_product(name: "Shampoo")
    products = [found, not_found]
    assert StreamProducts.filter(products, name: "aPt") == [found]
  end

  test "filter/2 by category" do
    found = create_product(category: :tech)
    not_found = create_product(category: :snacks)
    products = [found, not_found]
    assert StreamProducts.filter(products, category: :tech) == [found]
  end

  test "filter/2 by min price" do
    found1 = create_product(price: 101)
    found2 = create_product(price: 100)
    not_found = create_product(price: 99)
    products = [found1, found2, not_found]
    assert StreamProducts.filter(products, min: 100) == [found1, found2]
  end

  test "filter/2 by max price" do
    found1 = create_product(price: 99)
    found2 = create_product(price: 100)
    not_found = create_product(price: 101)
    products = [found1, found2, not_found]
    assert StreamProducts.filter(products, max: 100) == [found1, found2]
  end

  test "filter/2 by max and min price" do
    found1 = create_product(price: 100)
    found2 = create_product(price: 150)
    found3 = create_product(price: 200)
    not_found1 = create_product(price: 99)
    not_found2 = create_product(price: 201)
    products = [found1, found2, found3, not_found1, not_found2]
    assert StreamProducts.filter(products, min: 100, max: 200) == [found1, found2, found3]
  end

  test "filter/2 all filters" do
    found = create_product(price: 150, name: "Laptop", category: :tech)
    wrong_category = create_product(price: 150, name: "Laptop", category: :wrong)
    wrong_name = create_product(price: 150, name: "Wrong", category: :wrong)
    too_low_price = create_product(price: 99, name: "Laptop", category: :wrong)
    too_high_price = create_product(price: 201, name: "Laptop", category: :wrong)

    products = [found, wrong_category, wrong_name, too_low_price, too_high_price]

    assert StreamProducts.filter(products, min: 100, max: 200, name: "Laptop", category: :tech) == [
             found
           ]
  end

  # simplifies creation of product test data
  defp create_product(attrs \\ %{}) do
    attrs
    |> Enum.into(%{
      name: Enum.random(["Laptop", "Shampoo", "Phone"]),
      category: Enum.random([:tech, :snacks, :health]),
      price: Enum.random(1..1000)
    })
  end
end

ExUnit.run()
```

</details>

<!-- livebook:{"break_markdown":true} -->

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

In this example, we solve the problem by enumerating over products and checking each filter.

```elixir
defmodule StreamProducts do
  def filter(products, filters) do
    name_filter = filters[:name] || ""
    min_filter = filters[:min]
    max_filter = filters[:max]
    category_filter = filters[:category]

    products
    |> Stream.filter(fn %{name: name} -> Regex.match?(~r/#{name_filter}/i, name) end)
    |> Stream.reject(fn %{price: price} -> min_filter && price < min_filter end)
    |> Stream.reject(fn %{price: price} -> max_filter && max_filter < price end)
    |> Stream.reject(fn %{category: category} ->
      category_filter && category_filter != category
    end)
    |> Enum.to_list()
  end
end
```

</details>

<!-- livebook:{"break_markdown":true} -->

Implement the `StreamProducts` module using Streams instead of the [Enum](https://hexdocs.pm/elixir/Enum.html) module.

```elixir
defmodule StreamProducts do
  @moduledoc """
  Documentation for `Products`
  """

  @doc """
  Filter products by name, category, and price.
  The name filter should be case insensitive and handle partial matches.

  ## Examples

    No filters returns all products.

    iex> StreamProducts.filter([%{name: "Laptop", category: :tech, price: 100}], [])
    [%{name: "Laptop", category: :tech, price: 100}]

    Filter by name

    iex> StreamProducts.filter([%{name: "Laptop", category: :tech, price: 100}], name: "Laptop")
    [%{name: "Laptop", category: :tech, price: 100}]

    iex> StreamProducts.filter([%{name: "Laptop", category: :tech, price: 100}], name: "apt")
    [%{name: "Laptop", category: :tech, price: 100}]

    iex> StreamProducts.filter([%{name: "Laptop", category: :tech, price: 100}], name: "APT")
    [%{name: "Laptop", category: :tech, price: 100}]

    iex> StreamProducts.filter([%{name: "Laptop", category: :tech, price: 100}], name: "Phone")
    []

    Multiple filters.

    iex> StreamProducts.filter([%{name: "Laptop", category: :tech, price: 100}], min: 50, max: 200, name: "Laptop", category: :tech)
    [%{name: "Laptop", category: :tech, price: 100}]
  """
  def filter(products, filters) do
    products
    |> Stream.filter(fn product ->
      Enum.all?(filters, fn filter -> do_filter(filter, product) end)
    end)
    |> Enum.to_list()
  end

  defp do_filter({:name, name}, product) do
    Regex.compile!(name, [:caseless])
    |> Regex.match?(product.name)
  end

  defp do_filter({:min, min}, product), do: min <= product.price
  defp do_filter({:max, max}, product), do: product.price <= max
  defp do_filter({:category, category}, product), do: category == product.category
end

ExUnit.start(auto_run: false)

defmodule StreamProductsTest do
  use ExUnit.Case

  @products [
    %{name: "Laptop", category: :tech, price: 100_000},
    %{name: "Phone", category: :tech, price: 50000},
    %{name: "Chocolate", category: :snacks, price: 200},
    %{name: "Shampoo", category: :health, price: 1000}
  ]

  test "filter/2 empty filters" do
    assert StreamProducts.filter(@products, []) == @products
  end

  test "filter/2 by exact matching name" do
    assert StreamProducts.filter(@products, name: "Phone") == [
             %{name: "Phone", category: :tech, price: 50000}
           ]

    assert StreamProducts.filter(@products, name: "Shampoo") == [
             %{name: "Shampoo", category: :health, price: 1000}
           ]
  end

  test "filter/2 by partial matching name" do
    assert StreamProducts.filter(@products, name: "hon") == [
             %{name: "Phone", category: :tech, price: 50000}
           ]

    assert StreamProducts.filter(@products, name: "amp") == [
             %{name: "Shampoo", category: :health, price: 1000}
           ]
  end

  test "filter/2 by mixed case partial matching name" do
    assert StreamProducts.filter(@products, name: "hOn") == [
             %{name: "Phone", category: :tech, price: 50000}
           ]

    assert StreamProducts.filter(@products, name: "AmP") == [
             %{name: "Shampoo", category: :health, price: 1000}
           ]
  end

  test "filter/2 by category" do
    assert StreamProducts.filter(@products, category: :tech) ==
             [
               %{name: "Laptop", category: :tech, price: 100_000},
               %{name: "Phone", category: :tech, price: 50000}
             ]

    assert StreamProducts.filter(@products, category: :health) == [
             %{name: "Shampoo", category: :health, price: 1000}
           ]
  end

  test "filter/2 by min price" do
    assert StreamProducts.filter(@products, min: 1200) ==
             [
               %{name: "Laptop", category: :tech, price: 100_000},
               %{name: "Phone", category: :tech, price: 50000}
             ]

    assert StreamProducts.filter(@products, min: 200) == @products
  end

  test "filter/2 by max price" do
    assert StreamProducts.filter(@products, max: 1200) ==
             [
               %{name: "Chocolate", category: :snacks, price: 200},
               %{name: "Shampoo", category: :health, price: 1000}
             ]

    assert StreamProducts.filter(@products, max: 100) == []
  end

  test "filter/2 by max and min price" do
    assert StreamProducts.filter(@products, min: 200, max: 60_000) ==
             [
               %{name: "Phone", category: :tech, price: 50000},
               %{name: "Chocolate", category: :snacks, price: 200},
               %{name: "Shampoo", category: :health, price: 1000}
             ]
  end

  test "filter/2 all filters" do
    assert StreamProducts.filter(@products, name: "P", category: :tech, min: 500, max: 100_000) ==
             [
               %{name: "Laptop", category: :tech, price: 100_000},
               %{name: "Phone", category: :tech, price: 50000}
             ]
  end
end

ExUnit.run()
```

## Bonus: Benchmark

Did using [Stream](https://hexdocs.pm/elixir/Stream.html) improve the performance of your solution? Use [Benchee](https://hexdocs.pm/benchee/Benchee.html) to find out. Ensure you benchmark your solution with a large and varied data set. We've included the [Faker](https://hexdocs.pm/faker/readme.html) project to make this easier.

```elixir
defmodule Products do
  @moduledoc """
  Documentation for `Products`
  """

  @doc """
  Filter products by :name, :min, :max, and :category.
  The name filter should be case insensitive and handle partial matches.
  """
  def filter(products, filters) do
    name = Keyword.get(filters, :name, "")
    min = Keyword.get(filters, :min, 0)
    max = Keyword.get(filters, :max, 1_000_000)
    category = Keyword.get(filters, :category, :all)

    products
    |> Enum.filter(fn map ->
      Regex.compile!(name, [:caseless])
      |> Regex.match?(map.name)
    end)
    |> Enum.filter(fn map ->
      map.price >= min and map.price <= max
    end)
    |> Enum.filter(fn map ->
      cond do
        category == :all -> map
        category == map.category -> map
        true -> nil
      end
    end)
  end
end
```

```elixir
defmodule StreamProducts2 do
  def filter(products, filters) do
    name_filter = filters[:name] || ""
    min_filter = filters[:min]
    max_filter = filters[:max]
    category_filter = filters[:category]

    products
    |> Stream.filter(fn %{name: name} -> Regex.match?(~r/#{name_filter}/i, name) end)
    |> Stream.reject(fn %{price: price} -> min_filter && price < min_filter end)
    |> Stream.reject(fn %{price: price} -> max_filter && max_filter < price end)
    |> Stream.reject(fn %{category: category} ->
      category_filter && category_filter != category
    end)
    |> Enum.to_list()
  end
end
```

Consider adding the `:memory_time` option to your benchmark to see which solution is more memory efficient.

<!-- livebook:{"break_markdown":true} -->

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
names = Enum.map(1..1000, fn _ -> Faker.Food.dish() end)
categories = [:a, :b, :c, :d, :e, :f, :g, :h, :i, :j, :k, :l, :m, :n, :o, :p]

products =
  for name <- names,
      category <- categories,
      do: %{name: name, category: category, price: Enum.random(1..100)}

filters = [name: "A", category: :tech, min: 25, max: 50]

Benchee.run(
  %{
    "Enum" => fn -> EnumProducts.filter(products, filters) end,
    "Stream" => fn -> StreamProducts.filter(products, filters) end
  },
  memory_time: 2
)
```

</details>

```elixir
names = Enum.map(1..1000, fn _ -> Faker.Food.dish() end)
categories = [:a, :b, :c, :d, :e, :f, :g, :h, :i, :j, :k, :l, :m, :n, :o, :p]

products =
  for name <- names,
      category <- categories,
      do: %{name: name, category: category, price: Enum.random(1..100)}

filters = [name: "A", category: :tech, min: 25, max: 50]

Benchee.run(
  %{
    "&StreamProducts.filter/2" => fn -> StreamProducts.filter(products, filters) end,
    "&StreamProducts2.filter/2" => fn -> StreamProducts2.filter(products, filters) end,
    "&Products.filter/2" => fn -> Products.filter(products, filters) end
  },
  memory_time: 2
)
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"lazy_product_filters_reading\"\n    \"exercises\" -> \"lazy_product_filters_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "lazy_product_filters_reading"
    "exercises" -> "lazy_product_filters_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b lazy-product-filters-exercise
$ git add .
$ git commit -m "finish lazy product filters exercise"
$ git push origin lazy-product-filters-exercise
```

Create a pull request from your `lazy-product-filters-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                     | Next                                                     |
| -------------------------------------------- | -------------------------------------------------------: |
| [Streams](../exercises/stream_drills.livemd) | [State: Agent and ETS](../reading/agents_and_ets.livemd) |
