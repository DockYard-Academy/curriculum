# Message Validation

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Message Validation

You're creating a messaging application where users can send each other messages as a string.

<!-- livebook:{"force_markdown":true} -->

```elixir
Message.send("hello!")
"hello!"
```

Use guards to ensure `Message.send/1` does not allow invalid data types.

<!-- livebook:{"force_markdown":true} -->

```elixir
Message.send(123)
** (FunctionClauseError) no function clause matching in Message.send/1    
    
    The following arguments were given to Message.send/1:
    
        # 1
        123
```

Users can also send each other messages as a `Message` struct which has a `:body` key.
Make sure you define a message struct, and use guards to create a `Message.send/1` clause which can handle `Message` structs. `Message.send/1` should return the `:body` field of the message.

<!-- livebook:{"force_markdown":true} -->

```elixir
Message.send(%Message{body: "hello!"})

```

Only allow messages that have a string in their `:body` field.

<!-- livebook:{"force_markdown":true} -->

```elixir
Message.send(%Message{body: 123})
** (FunctionClauseError) no function clause matching in Message.send/1    
    
    The following arguments were given to Message.send/1:
    
        # 1
        %Message{body: 123}
```

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Message do
  defstruct [:body]
  def send(message) when is_binary(message) do
    message
  end

  def send(message) when is_binary(message.body) do
    message.body
  end
end
```

</details>

Implement the `Message` module as documented below.

```elixir
defmodule Message do
  @moduledoc """
  Documentation for `Message`

    ## Examples

      iex> %Message{}
      %Message{body: nil}
  """
  defstruct []

  @doc """
  Send messages between users.
  Returns a string of the message if provided valid input.

  ## Examples

    iex> Message.send("hello!")
    "hello!"

    iex> Message.send("hi!")
    "hi!"

    iex> Message.send(%Message{body: "hello!"})
    "hello!"

    iex> Message.send(%Message{body: "hi!"})
    "hi!"

    iex> Message.send(123)
    ** (FunctionClauseError) no function clause matching in Message.send/1

    iex> Message.send(%{})
    ** (FunctionClauseError) no function clause matching in Message.send/1

    iex> Message.send({})
    ** (FunctionClauseError) no function clause matching in Message.send/1

    iex> Message.send(%Message{body: nil})
    ** (FunctionClauseError) no function clause matching in Message.send/1
        
    iex> Message.send(%Message{body: {}})
    ** (FunctionClauseError) no function clause matching in Message.send/1
  """
  def send(message) do
  end
end
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"message_validation_reading\"\n    \"exercises\" -> \"message_validation_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "message_validation_reading"
    "exercises" -> "message_validation_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b message-validation-exercise
$ git add .
$ git commit -m "finish message validation exercise"
$ git push origin message-validation-exercise
```

Create a pull request from your `message-validation-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                       | Next                                           |
| ------------------------------ | ---------------------------------------------: |
| [with](../reading/with.livemd) | [With Points](../exercises/with_points.livemd) |
