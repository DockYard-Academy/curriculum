# Comparison Operators

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Comparison Operators

Comparison operators allow us to compare values.

Using comparison operators, we can check if values are equal <span style="background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;">===</span>, greater than `>`, less than `<`,
greater than or equal <span style="background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;">>=</span>, and less than or equal <span style="background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;"><=</span>.

Comparison operators can be used on any value but are most commonly used to compare
integers and floats.

The result of a comparison is a boolean, either `true` or `false`.

For example, if we check that `5` equals `5`, we return `true`.

```elixir
5 === 5
```

Be aware that the font of this lesson may shorten some operators.

* `===` is <span style="background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;">===</span>
* `>=` is <span style="background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;">>=</span>
* `<=` is <span style="background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;"><=</span>
* `==` <span style="background-color: rgb(225 232 240); padding: 0.1rem 0.5rem; border-radius: 0.5rem;">==</span>

<!-- livebook:{"break_markdown":true} -->

Here are a few example comparisons and their results.

```elixir
Utils.table(:comparison_examples)
```

### Comparing Strings

When comparing strings, they compare based on alphabetical order. Letters earlier
in the alphabet are evaluated as smaller than letters later in the alphabet.

```elixir
"a" < "z"
```

Capital letters are always less than lowercase letters regardless of alphabetical order.

<!-- livebook:{"force_markdown":true} -->

```elixir
"Z" < "a"
```

### Remembering Greater Than And Less Than

`>` greater than

`<` less than

To help remember which symbol `<` or `>` means greater than or less than, you might find it helpful
to remember that the statement is `true` if the larger number goes on the larger side.

Some people find it helpful to visualize the statement as an alligator eating. And the alligator always wants
the biggest meal.

### Comparing Different Data Types

You can compare different data types to each other in the following [Sorting Order](https://hexdocs.pm/elixir/master/operators.html#term-ordering).

<!-- livebook:{"force_markdown":true} -->

```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

You'll notice several data types that you may not be familiar with above. Don't worry. There's no need to memorize this sorting order nor know all of these data types.

```elixir
"" > 1
```

### Strictly Equals

<!-- livebook:{"break_markdown":true} -->

There are two operators for checking equality in Elixir. `===` will check if two values
are strictly equal in both value and type. So despite having  the same numerical value,
`1` does not equal `1.0` because integers and floats are not the same types.

```elixir
1 === 1.0
```

However, if you only care about the numerical value and not the data type, you can use only
two equals signs instead of three `==`

```elixir
1.0 == 1
```

### Your Turn

<!-- livebook:{"break_markdown":true} -->

In the form below, enter the expected result of the comparison, either `true` or `false`.

```elixir
Utils.form(:comparison_operators_result)
```

In the form below, Enter the operator `==`, `===`, `>`, `<`, `>=`, or `<=`
that would make the statement `true` if it replaced all of the blanks `__`.

```elixir
Utils.form(:comparison_operators)
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish comparison operators section"
```
