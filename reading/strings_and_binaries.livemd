# Strings and Binaries

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Strings and Binaries

Strings are a common data type in most programming languages.

To check if a value is a string, we use the `is_binary/1` function. That's because
strings in Elixir are represented internally as binaries.

```elixir
is_binary("hello")
```

A binary is a sequence of bytes. bytes are a grouping of eight bits.

A bit is a single value represented as `0` or `1`. `0` and `1` correspond to on and off for an electrical signal.

Here we see a visual representation of a byte in memory.

<!-- livebook:{"break_markdown":true} -->

![](images/byte.png)

<!-- livebook:{"break_markdown":true} -->

Bytes can represent integers with a base2 counting system where each bit represents
the next placeholder.

![](images/byte_base2.png)

This means the maximum integer a single byte can represent is `255`.

```elixir
128 + 64 + 32 + 16 + 8 + 4 + 2 + 1
```

By counting the placeholders in each byte we can determine the bytes value. These are binary numbers.

Integers are represented using a base 10 counting system compared to the base 2 counting system
for binary numbers. As the value in the rightmost placeholder grows, it shifts to
the left when it reaches `10` in base 10 or `2` in base 2.

![](images/base2_vs_base10.png)

Here's a table of binary numbers and their corresponding integer values.

<!-- livebook:{"attrs":{"source":"Enum.map(1..300, fn integer ->\n  binary = Integer.digits(integer, 2) |> Enum.join() |> String.to_integer()\n  %{base10: integer, base2: binary}\nend) |> Kino.DataTable.new()","title":"Base2 Conversion Table"},"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
Enum.map(1..300, fn integer ->
  binary = Integer.digits(integer, 2) |> Enum.join() |> String.to_integer()
  %{base10: integer, base2: binary}
end)
|> Kino.DataTable.new()
```

Each byte stores an integer between `1` and `255` in binary. These integers are used to represent characters. For example, the number `65` represents the `"A"` character. This number is called the **codepoint**. We can find the codepoint of any character using the `?` symbol.

```elixir
?A
```

We can also see that a string is actually a series of binary bytes representing a codepoint using [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) with the `binaries: :as_binaries` option.

```elixir
IO.inspect("ABCDEFG", binaries: :as_binaries)
```

## Unicode Code Points

To represent strings, each character is given a unique numerical index called a code point.
The [Unicode Standard](https://unicode.org/standard/standard.html) contains the complete registry of all possible characters and their numerical index.

We've already seen we can find the code point of a character using `?` in Elixir. For example the code point of `h` is `104`.

```elixir
?h
```

Here we can see a table of alphabetical characters and their code points. Notice that capital letters and
lowercase letters have different code points.

<!-- livebook:{"attrs":{"source":"\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n|> String.codepoints()\n|> Enum.map(fn char ->\n  <<code_point::utf8>> = char\n  %{character: char, code_point: code_point}\nend) |> Kino.DataTable.new()","title":"Code Points"},"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
|> String.codepoints()
|> Enum.map(fn char ->
  <<code_point::utf8>> = char
  %{character: char, code_point: code_point}
end)
|> Kino.DataTable.new()
```

To represent strings as binaries, each byte in the binary represents a code point.

For example, the code point for the the character `h` is `104` or `01101000` in a byte.

![](images/letter_h_binary.png)

```elixir
64 + 32 + 8
```

Using `byte_size/1` and `bit_size/1` We can see that (generally) each character in a string is a single byte or eight bits.

```elixir
byte_size("h")
```

```elixir
bit_size("h")
```

So a string with five characters would have five bytes or forty bits.

```elixir
bit_size("hello")
```

```elixir
byte_size("hello")
```

We can use [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) with the `:as_binaries` option to display a value as it's binary
representation.

Notice these are the code points for each character.

```elixir
IO.inspect("hello", binaries: :as_binaries)

?h = 104
?e = 101
?l = 108
?l = 108
?o = 111
```

Using the codepoints for these characters, we can create a charlist to see the relationship between charlists and binaries.

```elixir
[104, 101, 108, 108, 111]
```

We can also create a binary using `<<>>`. Don't worry about using this syntax. It's uncommon for most real-world applications.

```elixir
<<104, 101, 108, 108, 111>>
```

### UTF-8

[Unicode version 14.0](https://www.unicode.org/versions/Unicode14.0.0/) has a total of 144,697 characters with code points. Since a single byte can only store an integer up to `255` some characters must use multiple bytes.

Elixir uses UTF-8 to encode it's strings, meaning that each code point is encoded as a series of 8-bit bytes.

UTF-8 uses between one and four bytes to store each code point. For example the `√©` character
uses two bytes.

```elixir
byte_size("√©")
```

UTF-8 also uses graphemes. Graphemes may consist of multiple characters perceived as one.

We can see the underlying characters of a grapheme with [String.codepoints/1](https://hexdocs.pm/elixir/String.html#codepoints/1).

For example, the character can be represented as the "e with acute" code point or as the letter "e" followed by a "combining acute accent".

You can see below that while both have the same appearance, they have different code points.

```elixir
String.codepoints("eÃÅ")
```

```elixir
String.codepoints("√©")
```

When splitting a string into characters for the sake of enumeration, it's important to know if you want to enumerate through the
graphemes or the code points.

If you want to enumerate through each grapheme, rather than the underlying code points, then
you can use [String.graphemes/1](https://hexdocs.pm/elixir/String.html#graphemes/1).

```elixir
String.graphemes("eÃÅ")
```

### Your Turn

Use [String.graphemes/1](https://hexdocs.pm/elixir/String.html#graphemes/1) to convert the [woman fire fighter](https://emojipedia.org/woman-firefighter/) emoji üë©‚Äçüöí to a list of graphemes.

```elixir

```

Use [String.codepoints/1](https://hexdocs.pm/elixir/String.html#codepoints/1) to convert the emoji üë©‚Äçüöí into a list of codepoints. You'll notice it's actually a combination of the üë© and üöí emojis.

```elixir
String.codepoints("üë©‚Äçüöí")
```

## Hexadecimal

Since binary is cumbersome for representing large numbers, we use hexadecimal for a more
human friendly representation of binary values.

Hexadecimal is a base 16 counting system.

If base 10 uses ten symbols (0-9) and base 2 uses two symbols (0, 1), then Hexadecimal uses
sixteen symbols (0-9 a-f).

Hexadecimal uses decimal symbols from `1` to `9`. Then switches to using the letters `a` to `f` as you can see in the following table.

<!-- livebook:{"attrs":{"source":"\"0,1,2,3,4,5,6,7,8,9,10,a,b,c,d,e,f\"\n|> String.split(\",\")\n|> Enum.with_index()\n|> Enum.map(fn {symbol, index} -> %{integer: \"#{index}\", hexadecimal: symbol} end)\n|> Enum.take(-10)\n|> Kino.DataTable.new()","title":"Hexadecimal"},"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
"0,1,2,3,4,5,6,7,8,9,10,a,b,c,d,e,f"
|> String.split(",")
|> Enum.with_index()
|> Enum.map(fn {symbol, index} -> %{integer: "#{index}", hexadecimal: symbol} end)
|> Enum.take(-10)
|> Kino.DataTable.new()
```

```elixir

```

As the rightmost placeholder grows, it shifts to the left when it reaches `16`.
![](images/hex_counting.png)

<!-- livebook:{"break_markdown":true} -->

You may already be familiar with hexadecimal for color codes. For example, the color white is `ffffff`.
This is actually the hexadecimal code for `16777215`. you can add the placeholder values to find the hexadecimal
value like so:

```elixir
1_048_576 * 15 + 65536 * 15 + 4096 * 15 + 256 * 15 + 16 * 15 + 15
```

In Elixir, we can represent Hexadecimal integers using `0x` syntax. They are
equivalent to their integer counterpart.

```elixir
15 = 0xF
255 = 0xFF
4090 = 0xFFA
```

We can also represent the code point for a string using hexadecimal with `\u` syntax.

For example, `"\u0065"` is the character `"e"`

```elixir
"\u0065"
```

The codepoint for `e` is `101`

```elixir
?e
```

And the hexadecimal value `0x65` represents `101`. So, `\u0065` corresponds to the code point for `"e"`.

```elixir
0x65 = ?e
```

Which is why `"\u0065"` is the character `"e"`.

```elixir
"\u0065" = "e"
```

### Your Turn

Use hexadecimal `0x` syntax to represent the number `15`.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
0xf
```

</details>

```elixir

```

## Bitstrings

The codepoints for characters are represented with a UTF-8 encoded series of bytes. These
bytes are stored in a bitstring.

A bitstring is a contiguous sequence of bits in memory. A binary is a bitstring where the number
of bits is divisible by 8.

The `<<>>` syntax defines a new bitstring.

Strings in Elixir are actually bitstrings. For example, when we create a bitstring of
codepoints matching `"hello"` we create the `"hello"` string.

```elixir
#  h    e    l    l    o
<<104, 101, 108, 108, 111>>
```

It's fairly rare that you'll need to work directly with bitstrings for most applications. If you'd like to learn more, you can reference the [Elixir Documentation](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%3C%3C%3E%3E/1).

## Charlists

You may have noticed that occasionally lists of integers in Elixir will display unexpected
characters.

```elixir
[97, 98, 99]
```

That's because they are interpreted as a charlist. A charlist is a list of integers that
are all valid code points. If any integer in a list is not a valid codepoint, the list will
not be interpreted as a charlist.

```elixir
# a   b   c  invalid
[97, 98, 99, 1]
```

You can define a charlist using single quotes `''`.

```elixir
'hello'
```

This charlist is equivalent to a list of the code points for a string.

```elixir
[?h, ?e, ?l, ?l, ?o]
```

Charlists are a list of integers, so they can be enumerated through and will return a new
charlist. Here's how we could shift each character up one code point.

```elixir
Enum.map('abcde', fn each -> each + 1 end)
```

You can convert a charlist back into a string with [List.to_string/1](https://hexdocs.pm/elixir/List.html#to_string/1).

```elixir
List.to_string('hello')
```

Or convert a string into a charlist with [String.to_charlist/1](https://hexdocs.pm/elixir/String.html#to_charlist/1).

```elixir
String.to_charlist("hello")
```

Like bitstrings, you will likely not need to use charlists frequently, however they can be useful for certain string manipulation or when working with certain libraries.

If we want to inspect a list that contains codepoints, we can use [IO.inspect/2](https://hexdocs.pm/elixir/IO.html#inspect/2) with the `charlists: :as_lists` option.

```elixir
IO.inspect([65, 66, 67])
```

```elixir
IO.inspect([65, 66, 67], charlists: :as_lists)
```

### Your Turn

Convert the alphabet `"abcdefghijklmnopqrstuvwxyz"` to a charlist, then inspect it to see the codepoints for each letter.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
"abcdefghijklmnopqrstuvwxyz"
|> String.to_charlist()
|> IO.inspect(charlists: :as_lists)
```

</details>

```elixir

```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-strings_and_binaries
$ git add .
$ git commit -m "finish strings and binaries section"
$ git push origin exercise-strings_and_binaries
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                     | Next                             |
| -------------------------------------------- | -------------------------------: |
| [RPS Guards](../exercises/rps_guards.livemd) | [Regex](../reading/regex.livemd) |
