# Slot Machine

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Slot Machine Specs

Create a `SlotMachine` [GenServer](https://hexdocs.pm/elixir/GenServer.html) that represents a slot machine game. It should keep track of its `balance`. Balance is the amount of money the machine has. It should not give out more rewards than its balance. The starting balance of a slot machine is `7000` pennies.

When the `SlotMachine.roll/1` function is called the user should have a one in three chance of getting a reward.

The reward should be between `1` and the remaining balance of the machine.

You can use `:sys.get_state/1` to make sure that the `SlotMachine` is handling its state properly.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule SlotMachine do
  @moduledoc """
  The slot machine GenServer
  """
  use GenServer

  @doc """
    Start the slot machine

    ## Example

      iex> SlotMachine.start_link(1)
      {:ok, pid}

  """
  def start_link(_opts) do
    GenServer.start_link(__MODULE__, :ok)
  end

  def init(_) do
    {:ok, %{balance: 7000}}
  end

  @doc """
  This is the main function for this module.

  Make sure that that players get rewards only 30% of the time.
  Make sure that the machine doesn't give more rewards than its balance.
  Make sure the machine doesn't give negative rewards!

  The machine should either print "You lose!" or "You won ... pennies"
  """
  def roll(pid) do
    chance = Enum.random([1, 2, 3])

    # Only give reward 1 in 3 times 
    # Don't give reward if the machine does not have any money in it
    if chance != 1 || get_current_balance(pid) == 0 do
      IO.puts("You lose!")
    else
      # Provide random reward between 1 and current balance of pennies
      reward = Enum.random(1..get_current_balance(pid))
      subtract_from_balance(pid, reward)
      IO.puts("You won #{reward} pennies!")
    end
  end

  def get_current_balance(pid) do
    GenServer.call(pid, :get_balance)
  end

  def subtract_from_balance(pid, amount) do
    GenServer.call(pid, {:subtract_balance, amount})
  end

  def handle_call({:subtract_balance, amount}, _from, state) do
    state = %{balance: state.balance - amount}
    {:reply, state, state}
  end

  def handle_call(:get_balance, _from, state) do
    {:reply, state.balance, state}
  end
end

```

</details>

```elixir
defmodule SlotMachine do
  @moduledoc """
  The slot machine GenServer
  """
  use GenServer

  @doc """
    Start the slot machine

    ## Example

      iex> SlotMachine.start_link(1)
      {:ok, pid}

  """
  def start_link(_opts) do
    GenServer.start_link(__MODULE__, :ok)
  end

  def init(_) do
    {:ok, %{balance: 7000}}
  end

  @doc """
  This is the main function for this module.

  Make sure that that players get rewards only 30% of the time.
  Make sure that the machine doesn't give more rewards than its balance.
  Make sure the machine doesn't give negative rewards!

  The machine should either print "You lose!" or "You won ... pennies"
  """
  def roll(pid) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-slot_machine
$ git add .
$ git commit -m "finish slot machine exercise"
$ git push origin exercise-slot_machine
```

Then create a pull request to your `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

## Up Next

| Previous                                                         | Next                                                 |
| ---------------------------------------------------------------- | ---------------------------------------------------: |
| [Traffic Light Server](../exercises/traffic_light_server.livemd) | [Pokemon Server](../exercises/pokemon_server.livemd) |
