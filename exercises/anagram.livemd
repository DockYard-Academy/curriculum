# Anagram

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Anagram

Two words that contain all the same letters are anagrams.
For example **bored** and **robed** are anagrams.

* Create a function `anagram?/2` which determines if two strings are anagrams.
* Create a function `filter_anagrams/2` which filters a list based on if they are anagrams of a provided string.

<details style="background-color: lightgreen; padding: 12px">
<summary>Solution Example</summary>

```elixir
defmodule Anagram do
  def anagram?(string1, string2) do
    sort_string(word) == sort_string(possible_anagram)
  end

  def filter_anagrams(words, string) do
    Enum.filter(words, fn word -> anagram?(word, string) end)
  end

  defp sort_string(string) do
    String.split(string, "", trim: true) |> Enum.sort() |> Enum.join()
  end
end
```

</details>

```elixir
defmodule Anagram do
  @moduledoc """
  Documentation for `Anagram`.
  """

  @doc """
  Determine if two strings are anagrams.

  ## Examples

    iex> Anagram.anagram?("abc", "bac")
    true

    iex> Anagram.anagram?("sit", "its")
    true

    iex> Anagram.anagram?("cats", "dogs")
    false

    iex> Anagram.anagram?("robed", "bored")
    true
  """
  def anagram?(string1, string2) do
  end

  @doc """
  Filter anagrams.

  ## Examples

    iex> Anagram.filter_anagrams(["abc", "bca", "abcd", "cat"], "bac")
    ["abc", "bca"]

    iex> Anagram.filter_anagrams(["rams", "mars", "arms", "alarms"], "arms")
    ["rams", "mars", "arms"]

    iex> Anagram.filter_anagrams(["stop"], "go")
    []
  """
  def filter_anagrams(word_list, anagram) do
  end
end
```

## Bonus: Anagram Solver

Given a string, return all possible permutations of the string to return a list of potential anagrams.

<div style="background-color: lightcoral; font-weight: bold; padding: 1rem; margin: 1rem 0;">
This is a HARD challenge. Move on to regular exercises before attempting this.
</div>

```elixir
defmodule Anagram do
  @doc """
  Return a list of all string permutations to solve for all anagrams.

  ## Examples

    iex> Anagram.solve("a")
    ["a"]

    iex> Anagram.solve("ab")
    ["ab", "ba"]

    iex> Anagram.solve("abc")
    ["abc", "acb", "bac", "bca", "cab", "cba"]
  """
  def solve(string) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-anagram
$ git add .
$ git commit -m "finish anagram exercise"
$ git push origin exercise-anagram
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                     | Next                                                     |
| -------------------------------------------- | -------------------------------------------------------: |
| [Palindrome](../exercises/palindrome.livemd) | [Animal Generator](../exercises/animal_generator.livemd) |
