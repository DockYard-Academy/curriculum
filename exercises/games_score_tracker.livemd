# Games: Score Tracker

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Games: Score Tracker

Previously you created a [Score Tracker](./score_tracker.livemd) [GenServer](https://hexdocs.pm/elixir/GenServer.html) which can track and add to a score.

You're going to re-create this score tracker in a `Games.ScoreTracker` module.
You may use this `Games.ScoreTracker` module in future exercises to keep track of a score.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = Games.ScoreTracker.start_link([])
Games.ScoreTracker.add(pid, 10)
10 = Games.ScoreTracker.get(pid)
Games.ScoreTracker.add(pid, 20)
30 = Games.ScoreTracker.get(pid)
```

Implement the `Games.ScoreTracker` in your existing [Games](./games_setup.livemd) project. Create a full test suite to ensure it behaves as expected.

```elixir
defmodule Games.ScoreTracker do
  @moduledoc """
  Documentation for `Games.ScoreTracker`.
  """
  use GenServer

  # Client functions

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  def add(pid, score) do
    GenServer.cast(pid, {:add, score})
  end

  def get(pid) do
    GenServer.call(pid, :get)
  end

  # Server callback functions

  @impl true
  def init(_init_arg) do
    {:ok, 0}
  end

  @impl true
  def handle_cast({:add, score}, state) do
    {:noreply, state + score, state + score}
  end

  @impl true
  def handle_call(:get, _from, state) do
    {:reply, state, state}
  end
end
```

```elixir
{:ok, pid} = Games.ScoreTracker.start_link([])
```

```elixir
Process.alive?(pid)
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"games_score_tracker_reading\"\n    \"exercises\" -> \"games_score_tracker_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "games_score_tracker_reading"
    "exercises" -> "games_score_tracker_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b games-score-tracker-exercise
$ git add .
$ git commit -m "finish games score tracker exercise"
$ git push origin games-score-tracker-exercise
```

Create a pull request from your `games-score-tracker-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                             | Next                                                      |
| ---------------------------------------------------- | --------------------------------------------------------: |
| [Pokemon Server](../exercises/pokemon_server.livemd) | [Asynchronous Messages](../reading/async_messages.livemd) |
