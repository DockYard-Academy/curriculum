# Phone Number Parsing

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Phone Number Parsing

You have been provided a large string of phone numbers. The problem is, each phone number does
not follow a standard format.

You have been asked to convert them from the non standardized format into a standard format.

Phone numbers will be given in the following formats:

* `1231231234`
* `123 123 1234`
* `(123)-123-1234`
* `(123) 123 1234`
* `(123)123-1234`

You need to convert them into the format `123-123-1234`.

<!-- livebook:{"force_markdown":true} -->

```elixir
text = """
1231231234
123 123 1234
(123)-123-1234
(123) 123 1234
(123)123-1234
"""
PhoneNumber.parse(text)
"""
123-123-1234
123-123-1234
123-123-1234
123-123-1234
123-123-1234
"""
```

<details style="background-color: burlywood; padding: 1rem; margin: 1rem 0;">
<summary>Hint</summary>

Consider using regular expressions with digits and capture groups to replace
phone number expressions in the string.

You can replace expressions one at a time, rather than all at once.

</details>

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule PhoneNumber
  def parse(string) do
    replacement = "\\1-\\2-\\3"

    string
    |> String.replace(~r/(\d{3})(\d{3})(\d{4})/, replacement)
    |> String.replace(~r/(\d{3}) (\d{3}) (\d{4})/, replacement)
    |> String.replace(~r/\((\d{3})\)-(\d{3})-(\d{4})/, replacement)
    |> String.replace(~r/\((\d{3})\) (\d{3}) (\d{4})/, replacement)
    |> String.replace(~r/\((\d{3})\)(\d{3})-(\d{4})/, replacement)
  end
end
```

</details>

Implement the `PhoneNumber` module as documented below.

```elixir
defmodule PhoneNumber do
  @moduledoc """
  Documentation for `PhoneNumber`
  """

  @doc """
  Parse phone numbers and convert them to XXX-XXX-XXXX format.

  ## Examples

    iex> PhoneNumber.parse("1231231234")
    "123-123-1234"

    iex> PhoneNumber.parse("123 123 1234")
    "123-123-1234"

    iex> PhoneNumber.parse("(123)-123-1234")
    "123-123-1234"

    iex> PhoneNumber.parse("(123) 123 1234")
    "123-123-1234"

    iex> PhoneNumber.parse("(123)123-1234")
    "123-123-1234"

    iex> PhoneNumber.parse("1231231234 4564564567")
    "123-123-1234 456-456-4567"
  """
  def parse(string) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-phone_number_parsing
$ git add .
$ git commit -m "finish phone number parsing exercise"
$ git push origin exercise-phone_number_parsing
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                         | Next                         |
| ---------------------------------------------------------------- | ---------------------------: |
| [Rollable Expressions](../exercises/rollable_expressions.livemd) | [IEx](../reading/iex.livemd) |
