# Non-Enumerables

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Enumeration With Non-Enumerables

Data types that do not contain multiple elements are not enumerable.
However, it's still sometimes useful to enumerate over non-enumerable data types.

Even though we can't enumerate over them directly, the trick is to convert
non-enumerable data into an enumerable data type, then convert them back if necessary.

## Integers

We can use the [Integer.digits/1](https://hexdocs.pm/elixir/Integer.html#digits/1) function to convert integers to a list of digits.

```elixir
Integer.digits(123)
```

### Your Turn

In the Elixir cell below, convert the integer `4389` into a list of digits.

```elixir

```

### Undigits

We can convert a list of digits back into a single integer using [Integer.undigits/2](https://hexdocs.pm/elixir/Integer.html#undigits/2).

```elixir
Integer.undigits([1, 2, 3])
```

## Tuples

Despite being so similar to lists, tuples are not considered enumerable.
That's primarily because they are intended as fixed-sized containers, and any case that requires
enumeration would likely be better served with lists.

To get around this if needed, you can convert a tuple to a list with [Tuple.to_list/1](https://hexdocs.pm/elixir/Tuple.html#to_list/1).

However, if you find yourself doing this often, it may be a better
choice to start with a list instead of a tuple.

```elixir
Tuple.to_list({1, 2, 3})
```

We can then convert a list back into a tuple using [List.to_tuple/1](https://hexdocs.pm/elixir/List.html#to_tuple/1)

```elixir
List.to_tuple([1, 2, 3])
```

## Strings

Strings are not enumerable.

```elixir
Enum.map("abc", fn char -> char end)
```

### [String.split/3](https://hexdocs.pm/elixir/String.html#split/3)

<!-- livebook:{"break_markdown":true} -->

However, strings can be converted into lists using [String.split/3](https://hexdocs.pm/elixir/String.html#split/3).

[String.split/3](https://hexdocs.pm/elixir/String.html#split/3) splits a string based on some value.

For example, we can split a string by every comma like so:

```elixir
String.split("a,b,c,d", ",")
```

We can split a string into a list of characters by splitting on every empty space `""` This does create an empty string becaused of the start and the end of the list.

```elixir
String.split("abcde", "")
```

You can trim whitespace using the `[trim: true]` option.

```elixir
String.split("abcde", "", trim: true)
```

By default, [String.split/1](https://hexdocs.pm/elixir/String.html#split/1) will split the string on every space.

```elixir
String.split("hello world")
```

Now your string is an enumerable list of characters.

<!-- livebook:{"break_markdown":true} -->

### Your Turn

In the Elixir cell below, convert the string `"Hello, world!"` into a list of single characters.

```elixir

```

### Joining Strings

Once you've applied your transformation to the list of string characters, you can rejoin them using [Enum.join/2](https://hexdocs.pm/elixir/Enum.html#join/2)

```elixir
Enum.join(["a", "b", "c"], "")
```

The default joiner is a string, so you can omit the second argument.

```elixir
Enum.join(["a", "b", "c"])
```

Alternatively we can join the strings by some joining character.

```elixir
Enum.join(["a", "b", "c"], "_")
```

We can use [String.split/3](https://hexdocs.pm/elixir/String.html#split/3) and [Enum.join/2](https://hexdocs.pm/elixir/Enum.html#join/2) in combination with each other to split strings, enumerate over them applying some transformation, and then rejoining them.

Here's a simple example of replacing all characters other than spaces with `"X"`.

```elixir
split_string = String.split("secret information", "")

transformed_list =
  Enum.map(split_string, fn char ->
    case char do
      " " -> " "
      _ -> "X"
    end
  end)

joined_string = Enum.join(transformed_list)
```

### Your Turn

Start with a string such as `"hello"`. Use enumeration to double every character in the string so the `"hello"` would become `"hheelllloo"`.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
split_string = String.split("hello", "")

doubled_string = Enum.map(split_string, fn char -> char <> char end)

Enum.join(doubled_string)
```

You might also use the pipe operator.

```elixir
"hello"
|> String.split("")
|> Enum.map(fn char -> char <> char end)
|> Enum.join()
```

</details>

Enter your solution below.

```elixir

```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-non_enumerables
$ git add .
$ git commit -m "finish non enumerables section"
$ git push origin exercise-non_enumerables
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                   | Next                                               |
| ------------------------------------------ | -------------------------------------------------: |
| [SafeRange](../exercises/saferange.livemd) | [Comprehensions](../reading/comprehensions.livemd) |
