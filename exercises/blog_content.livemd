# Blog: Blog Content

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new)

## Blog: Blog Content

In your [Blog](group_project_blog.livemd) project, you're going to separate each blog posts `content` field into a separate `PostContent` resource. `PostContent` will have a one-to-one relationship with your blog `Post` resource.

Each `PostContent` record should store a `full_text` field and a foreign key to a post record.

```mermaid
classDiagram
  class PostContent {
    full_text: :text
    post_id: :id
  }
```

<!-- livebook:{"break_markdown":true} -->

### Requirements

Ensure you:

* Create a `post_content` table in a migration.
* Create a `PostContent` schema.
* Can create a `Post` with associated `PostContent` through your existing post form.
* Can update a `Post` with associated `PostContent` through your existing post form.
* Display the post content on the blog post show page.

You do not need to remove the existing `:content` field on the blog post. See the bonus exercise below.

<details style="background-color: burlywood; padding: 1rem; margin: 1rem 0;">
<summary>Hint</summary>

### Post Schema and Migration

You can use the following command to generate the `PostContent` schema and migration boilerplate.

```
$ mix phx.gen.schema Blog.PostContent post_content full_text:text post_id:references:posts
```

### Post Form

You can use `inputs_for/3` to create the associated `post_content` field.

### PostContent Association

You can associate `PostContent` with `Post` using `has_one/3` and `belongs_to/3`.

### Creating Associated Post Content

You can use `cast_assoc/3` inside of the `Post` schema's `changeset/2` function to create the associated `:post_content`.

### Updating Associated Post Content

Ensure you preload the `:post_content` using `Repo.preload/3` whenever updating a post.

</details>

<!-- livebook:{"break_markdown":true} -->

### Bonus: Migrate the `:content` Field Into `PostContent`.

Create a migration that will create an associated `PostContent` record for every existing `Post` record using their `:content` field. Then in the same migration, remove the `:content` field from every post.

This simulates a real-world production system where you would likely need to preserve existing data.

Make sure you also update any places in your codebase using the `:content` field to avoid errors. For example you likely need to fix your seed files, tests, templates, etc.

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"blog_content_reading\"\n    \"exercises\" -> \"blog_content_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "blog_content_reading"
    "exercises" -> "blog_content_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b blog-content-exercise
$ git add .
$ git commit -m "finish blog content exercise"
$ git push origin blog-content-exercise
```

Create a pull request from your `blog-content-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                               | Next                                                               |
| ---------------------------------------------------------------------- | -----------------------------------------------------------------: |
| [BookSearch: Book Content](../reading/book_search_book_content.livemd) | [BookSearch: Deployment](../reading/book_search_deployment.livemd) |
