# Process Mailbox

```elixir
Mix.install([
  {:jason, "~> 1.4"},
  {:kino, "~> 0.8.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Process Mailbox

You're going to create a `Mailbox` using a process which loops and receives messages.

<!-- livebook:{"force_markdown":true} -->

```elixir
mailbox_process = spawn(fn -> Mailbox.loop() end)
```

You should be able to send the `Mailbox` a message to add a virtual letter to the mailbox.
Print the current list of letters during every loop to prove your spawned process is storing every message in its state.

<!-- livebook:{"force_markdown":true} -->

```elixir
send(mailbox_process, {:mail, "You've Got Mail!"})
# ["You've Got Mail!"]

send(mailbox_process, {:mail, "You've Got Mail..Again!"})
# ["You've Got Mail..Again!", "You've Got Mail!"]
```

We won't typically work directly with processes like this. Instead we'll rely on abstractions such as [GenServer](https://hexdocs.pm/elixir/GenServer.html) which we will learn about in a future lesson.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Mailbox do
  def loop(state \\ []) do
    IO.inspect(state)
    receive do
      {:mail, letter} -> loop([letter | state])
    end
  end
end
```

</details>

Implement the `Mailbox` module below.

```elixir
defmodule Mailbox do
  @moduledoc """
  Documentation for `Mailbox`
  """

  @doc """
  Recursively loop and receive messages.

  ## Examples

      iex> counter_process = spawn(fn -> Mailbox.loop() end)
      iex> send(counter_process, {:mail, "Hello!"})
  """
  def loop(state \\ []) do
    # IO.puts("#{state}")
    IO.inspect(state)

    receive do
      {:mail, contents} -> loop([contents | state])
    end
  end
end

mailbox_process = spawn(fn -> Mailbox.loop() end)
```

## Mark As Completed

<!-- livebook:{"attrs":{"source":"file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, \"\"), \".livemd\")\n\nsave_name =\n  case Path.basename(__DIR__) do\n    \"reading\" -> \"process_mailbox_reading\"\n    \"exercises\" -> \"process_mailbox_exercise\"\n  end\n\nprogress_path = __DIR__ <> \"/../progress.json\"\nexisting_progress = File.read!(progress_path) |> Jason.decode!()\n\ndefault = Map.get(existing_progress, save_name, false)\n\nform =\n  Kino.Control.form(\n    [\n      completed: input = Kino.Input.checkbox(\"Mark As Completed\", default: default)\n    ],\n    report_changes: true\n  )\n\nTask.async(fn ->\n  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do\n    File.write!(\n      progress_path,\n      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)\n    )\n  end\nend)\n\nform","title":"Track Your Progress"},"chunks":null,"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
file_name = Path.basename(Regex.replace(~r/#.+/, __ENV__.file, ""), ".livemd")

save_name =
  case Path.basename(__DIR__) do
    "reading" -> "process_mailbox_reading"
    "exercises" -> "process_mailbox_exercise"
  end

progress_path = __DIR__ <> "/../progress.json"
existing_progress = File.read!(progress_path) |> Jason.decode!()

default = Map.get(existing_progress, save_name, false)

form =
  Kino.Control.form(
    [
      completed: input = Kino.Input.checkbox("Mark As Completed", default: default)
    ],
    report_changes: true
  )

Task.async(fn ->
  for %{data: %{completed: completed}} <- Kino.Control.stream(form) do
    File.write!(
      progress_path,
      Jason.encode!(Map.put(existing_progress, save_name, completed), pretty: true)
    )
  end
end)

form
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout -b process-mailbox-exercise
$ git add .
$ git commit -m "finish process mailbox exercise"
$ git push origin process-mailbox-exercise
```

Create a pull request from your `process-mailbox-exercise` branch to your `solutions` branch.
Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your instructor by including `@BrooklinJazz` in your PR description to get feedback.
You (or your instructor) may merge your PR into your solutions branch after review.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                      | Next                                               |
| --------------------------------------------- | -------------------------------------------------: |
| [Process](../exercises/process_drills.livemd) | [Generic Server](../reading/generic_server.livemd) |
