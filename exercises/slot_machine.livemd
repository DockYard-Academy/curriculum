# Slot Machine

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Slot Machine Specs

Create a `SlotMachine` [GenServer](https://hexdocs.pm/elixir/GenServer.html) that represents a slot machine game. It should keep track of its `balance`. Balance is the amount of money the machine has. It should not give out more rewards than its balance. The starting balance of a slot machine is `7000` pennies.

When the `SlotMachine.roll/1` function is called the user should have a one in three chance of getting a reward.

The should be between `1` and the remaning balance of the machine.

- use `:sys.get_state/1` to make sure that the `SlotMachine` is handling its state properly.

You need to use if statements and the `:rand` erlang module to complete this exercise.

```elixir
defmodule SlotMachine do
  use GenServer

  def start_link(opts) do
    GenServer.start_link(__MODULE__, :ok)
  end

  def init(:ok) do
    {:ok, %{balance: 7000}}
  end

  @doc """
  This is the main function for this module.

  Make sure that that players get rewards only 30% of the time.
  Make sure that the machine doesn't give more rewards than its balance.
  Make sure the machine doesn't give negative rewards!

  Use the :rand erlang module to generate random numbers.

  The machine should either print "You lose!" or "You won ... dollars"
  """
  def roll(pid) do
  end

  @doc """This function gets the current balance."""
  def handle_call({:get_balance}, _from, state) do
  end

  @doc """This function subtracts from the current balance"""
  def handle_call({:subtract_balance, amount}, _from, state) do
  end
end
```

## Bonuses

- Make numbers spin on screen with `IO.write` to make the slot machine more interesting.
- Create another [GenServer](https://hexdocs.pm/elixir/GenServer.html) that represents a person in the casino and make that person have to pay money in order to use the slot machine. A person can no longer play if he runs out of money.

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-slot_machine
$ git add .
$ git commit -m "finish slot machine exercise"
$ git push origin exercise-slot_machine
```

Then create a pull request to your `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

## Up Next

| Previous                                                         |                                                 Next |
| ---------------------------------------------------------------- | ---------------------------------------------------: |
| [Traffic Light Server](../exercises/traffic_light_server.livemd) | [Pokemon Server](../exercises/pokemon_server.livemd) |
