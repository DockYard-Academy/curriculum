# Rock Paper Scissors

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "#{__DIR__}/../utils"},
  {:tested_cell, git: "https://github.com/BrooklinJazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Create The Perfect AI

In the Elixir cell below, you're going to create the perfect AI for rock paper scissors.

```mermaid
flowchart LR
scissors --beats--> paper --beats--> rock --beats--> scissors
```

You are **only** allowed to use boolean operators `&&`, `==`, and `||` and the match operator `=`.

Remember that you can conditionally return a value with:

<!-- livebook:{"force_markdown":true} -->

```elixir
player_choice = :rock

ai_choice = player_choice == :rock && :paper
```

Given a `player_choice` of either `:rock`, `:paper`, or `:scissors` determining the winning
`ai_choice`.

Replace `nil` with your answer. Change `player_choice` to `:rock`, `:paper`, and `:scissors` to ensure
your solution works correctly.

<!-- livebook:{"attrs":{"assertions":"case player_choice do\n  :rock ->\n    assert ai_choice === :paper,\n      \"when player_choice is :rock, ai_choice should be :paper.\"\n\n  :paper ->\n    assert ai_choice === :scissors,\n      \"when player_choice is :paper, ai_choice should be :scissors.\"\n\n  :scissors ->\n    assert ai_choice === :rock,\n      \"when player_choice is :scissors, ai_choice should be :rock.\"\nend","code":"player_choice = :rock\r\n\r\nai_choice = nil","solution":"ai_choice =\n  (player_choice == :scissors && :rock) ||\n    (player_choice == :rock && :paper) ||\n    (player_choice == :paper && :scissors)"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    player_choice = :rock

    ai_choice = nil

    case player_choice do
      :rock ->
        assert ai_choice === :paper,
               "when player_choice is :rock, ai_choice should be :paper."

      :paper ->
        assert ai_choice === :scissors,
               "when player_choice is :paper, ai_choice should be :scissors."

      :scissors ->
        assert ai_choice === :rock,
               "when player_choice is :scissors, ai_choice should be :rock."
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
player_choice = :rock

ai_choice = nil
```

## Create Two Player Rock Paper Scissors

In the Elixir cell below, you're going to create a two player game of rock paper scissors.

As earlier, you should **only** use the `&&`, `=`, `===`, and `||` operators.

Given `player1_choice` and `player2_choice` are either `:rock`, `:paper`, or `:scissors`.
Determine the `winner` as either `:player1` or `:player2`.

```mermaid
flowchart LR
p1c[player_1_choice]
p2c[player_2_choice]
w[winner]
p1[:player1]
p2[:player2]

p1c --> w
p2c --> w
w --> p1
w --> p2
```

Replace `nil` with your answer.

<!-- livebook:{"attrs":{"assertions":"case {player1_choice, player2_choice} do\n  {:rock, :scissors} -> assert winner == :player1\n  {:paper, :rock} -> assert winner == :player1\n  {:scissors, :paper} -> assert winner == :player1\n  {:scissors, :rock} -> assert winner == :player2\n  {:rock, :paper} -> assert winner == :player2\n  {:paper, :scissors} -> assert winner == :player2\n  _ -> assert winner == :draw\nend","code":"# Will be either :rock, :paper, or :scissors\r\nplayer1_choice = Utils.random(:rock_paper_scissors)\r\n# Will be either :rock, :paper, or :scissors\r\nplayer2_choice = Utils.random(:rock_paper_scissors)\r\n\r\nwinner = nil","solution":"winner =\n  (player1_choice == :scissors && player2_choice == :rock && :player2) ||\n    (player1_choice == :rock && player2_choice == :paper && :player2) ||\n    (player1_choice == :paper && player2_choice == :scissors && :player2) ||\n    (player1_choice == player2_choice && :draw) ||\n    :player1"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "" do
    # Will be either :rock, :paper, or :scissors
    player1_choice = Utils.random(:rock_paper_scissors)
    # Will be either :rock, :paper, or :scissors
    player2_choice = Utils.random(:rock_paper_scissors)

    winner = nil

    case {player1_choice, player2_choice} do
      {:rock, :scissors} -> assert winner == :player1
      {:paper, :rock} -> assert winner == :player1
      {:scissors, :paper} -> assert winner == :player1
      {:scissors, :rock} -> assert winner == :player2
      {:rock, :paper} -> assert winner == :player2
      {:paper, :scissors} -> assert winner == :player2
      _ -> assert winner == :draw
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Will be either :rock, :paper, or :scissors
player1_choice = Utils.random(:rock_paper_scissors)
# Will be either :rock, :paper, or :scissors
player2_choice = Utils.random(:rock_paper_scissors)

winner = nil
```

## Commit Your Progress

Run the following in your command line from the project folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish rock paper scissors exercise"
```
